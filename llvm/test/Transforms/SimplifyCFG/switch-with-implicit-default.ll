; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=simplifycfg -simplifycfg-require-and-preserve-domtree=1 -S | FileCheck %s

declare void @func0()
declare void @func1()
declare void @func2()
declare void @func3()
declare void @unreachable()

define void @positive(i32 %x) {
; CHECK-LABEL: define void @positive(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ult i32 [[X]], 3
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i32 [[X]], i32 1
; CHECK-NEXT:    switch i32 [[X]], label %[[CASE1:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE0:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE0]]:
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ult i32 %x, 3
  %v = select i1 %c, i32 %x, i32 1
  switch i32 %v, label %default [
  i32 0, label %case0
  i32 1, label %case1
  i32 2, label %case2
  ]

default:
  tail call void @unreachable()
  br label %end

case0:
  tail call void @func0()
  br label %end

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

end:
  ret void
}

define void @positive_with_hole(i32 %x) {
; CHECK-LABEL: define void @positive_with_hole(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ult i32 [[X]], 5
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i32 [[X]], i32 1
; CHECK-NEXT:    switch i32 [[X]], label %[[CASE1:.*]] [
; CHECK-NEXT:      i32 3, label %[[CASE3:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE3]]:
; CHECK-NEXT:    tail call void @func3()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ult i32 %x, 5
  %v = select i1 %c, i32 %x, i32 1
  switch i32 %v, label %default [
  i32 1, label %case1
  i32 2, label %case2
  i32 3, label %case3
  ]

default:
  unreachable

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

case3:
  tail call void @func3()
  br label %end

end:
  ret void
}

define void @positive_with_ule(i32 %x) {
; CHECK-LABEL: define void @positive_with_ule(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ule i32 [[X]], 2
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i32 [[X]], i32 1
; CHECK-NEXT:    switch i32 [[X]], label %[[CASE1:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE0:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE0]]:
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ule i32 %x, 2
  %v = select i1 %c, i32 %x, i32 1
  switch i32 %v, label %default [
  i32 0, label %case0
  i32 1, label %case1
  i32 2, label %case2
  ]

default:
  tail call void @unreachable()
  br label %end

case0:
  tail call void @func0()
  br label %end

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

end:
  ret void
}

define void @positive_with_i128(i128 %x) {
; CHECK-LABEL: define void @positive_with_i128(
; CHECK-SAME: i128 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ult i128 [[X]], 3
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i128 [[X]], i128 1
; CHECK-NEXT:    switch i128 [[X]], label %[[CASE1:.*]] [
; CHECK-NEXT:      i128 0, label %[[CASE0:.*]]
; CHECK-NEXT:      i128 2, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE0]]:
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ult i128 %x, 3
  %v = select i1 %c, i128 %x, i128 1
  switch i128 %v, label %default [
  i128 0, label %case0
  i128 1, label %case1
  i128 2, label %case2
  ]

default:
  tail call void @unreachable()
  br label %end

case0:
  tail call void @func0()
  br label %end

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

end:
  ret void
}

define void @positive_manual_default_out_of_cases(i32 %x) {
; CHECK-LABEL: define void @positive_manual_default_out_of_cases(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ult i32 [[X]], 3
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i32 [[X]], i32 7
; CHECK-NEXT:    switch i32 [[X]], label %[[DEFAULT:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE0:.*]]
; CHECK-NEXT:      i32 1, label %[[CASE1:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[DEFAULT]]:
; CHECK-NEXT:    tail call void @unreachable()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE0]]:
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ult i32 %x, 3
  %v = select i1 %c, i32 %x, i32 7
  switch i32 %v, label %default [
  i32 0, label %case0
  i32 1, label %case1
  i32 2, label %case2
  ]

default:
  tail call void @unreachable()
  br label %end

case0:
  tail call void @func0()
  br label %end

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

end:
  ret void
}


define void @wrong_icmp(i32 %x) {
; CHECK-LABEL: define void @wrong_icmp(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ugt i32 [[X]], 2
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i32 [[X]], i32 1
; CHECK-NEXT:    switch i32 [[V]], label %[[DEFAULT:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE0:.*]]
; CHECK-NEXT:      i32 1, label %[[CASE1:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[DEFAULT]]:
; CHECK-NEXT:    tail call void @unreachable()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE0]]:
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ugt i32 %x, 2
  %v = select i1 %c, i32 %x, i32 1
  switch i32 %v, label %default [
  i32 0, label %case0
  i32 1, label %case1
  i32 2, label %case2
  ]

default:
  tail call void @unreachable()
  br label %end

case0:
  tail call void @func0()
  br label %end

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

end:
  ret void
}

define void @outer_icmp_too_wide(i32 %x) {
; CHECK-LABEL: define void @outer_icmp_too_wide(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ult i32 [[X]], 4
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i32 [[X]], i32 1
; CHECK-NEXT:    switch i32 [[V]], label %[[DEFAULT:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE0:.*]]
; CHECK-NEXT:      i32 1, label %[[CASE1:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[DEFAULT]]:
; CHECK-NEXT:    tail call void @unreachable()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE0]]:
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ult i32 %x, 4
  %v = select i1 %c, i32 %x, i32 1
  switch i32 %v, label %default [
  i32 0, label %case0
  i32 1, label %case1
  i32 2, label %case2
  ]

default:
  tail call void @unreachable()
  br label %end

case0:
  tail call void @func0()
  br label %end

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

end:
  ret void
}

define void @outer_icmp_too_narrow(i32 %x) {
; CHECK-LABEL: define void @outer_icmp_too_narrow(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ult i32 [[X]], 2
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i32 [[X]], i32 1
; CHECK-NEXT:    switch i32 [[V]], label %[[DEFAULT:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE0:.*]]
; CHECK-NEXT:      i32 1, label %[[CASE1:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[DEFAULT]]:
; CHECK-NEXT:    tail call void @unreachable()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE0]]:
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ult i32 %x, 2
  %v = select i1 %c, i32 %x, i32 1
  switch i32 %v, label %default [
  i32 0, label %case0
  i32 1, label %case1
  i32 2, label %case2
  ]

default:
  tail call void @unreachable()
  br label %end

case0:
  tail call void @func0()
  br label %end

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

end:
  ret void
}

define void @switch_cases_not_continuous_1(i32 %x) {
; CHECK-LABEL: define void @switch_cases_not_continuous_1(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ult i32 [[X]], 3
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i32 [[X]], i32 2
; CHECK-NEXT:    switch i32 [[V]], label %[[DEFAULT:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE0:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[DEFAULT]]:
; CHECK-NEXT:    tail call void @unreachable()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE0]]:
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ult i32 %x, 3
  %v = select i1 %c, i32 %x, i32 2
  switch i32 %v, label %default [
  i32 0, label %case0
  i32 2, label %case2
  ]

default:
  tail call void @unreachable()
  br label %end

case0:
  tail call void @func0()
  br label %end

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

end:
  ret void
}

define void @switch_cases_not_continuous_2(i32 %x) {
; CHECK-LABEL: define void @switch_cases_not_continuous_2(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:    [[C:%.*]] = icmp ult i32 [[X]], 3
; CHECK-NEXT:    [[V:%.*]] = select i1 [[C]], i32 [[X]], i32 2
; CHECK-NEXT:    switch i32 [[V]], label %[[DEFAULT:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE0:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE2:.*]]
; CHECK-NEXT:      i32 3, label %[[CASE1:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[DEFAULT]]:
; CHECK-NEXT:    tail call void @unreachable()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[CASE0]]:
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    tail call void @func2()
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
  %c = icmp ult i32 %x, 3
  %v = select i1 %c, i32 %x, i32 2
  switch i32 %v, label %default [
  i32 0, label %case0
  i32 2, label %case2
  i32 3, label %case1
  ]

default:
  tail call void @unreachable()
  br label %end

case0:
  tail call void @func0()
  br label %end

case1:
  tail call void @func1()
  br label %end

case2:
  tail call void @func2()
  br label %end

end:
  ret void
}
