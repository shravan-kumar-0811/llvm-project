; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -fix-irreducible -structurizecfg -S | FileCheck %s

; Both B1 and B4 are headers of an irreducible cycle. But in the
; structurized version, B1 dominates B4. The program is structurized
; correctly when the irreducible cycle is fixed.

define void @irreducible(i1 %PredEntry, i1 %PredB1, i1 %PredB2, i1 %PredB3, i1 %PredB4)
; CHECK-LABEL: @irreducible(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PREDB2_INV:%.*]] = xor i1 [[PREDB2:%.*]], true
; CHECK-NEXT:    br label [[IRR_GUARD:%.*]]
; CHECK:       Flow3:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ undef, [[FLOW4:%.*]] ], [ [[TMP9:%.*]], [[FLOW:%.*]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = phi i1 [ [[TMP3:%.*]], [[FLOW4]] ], [ [[TMP10:%.*]], [[FLOW]] ]
; CHECK-NEXT:    [[TMP2:%.*]] = phi i1 [ [[TMP4:%.*]], [[FLOW4]] ], [ false, [[FLOW]] ]
; CHECK-NEXT:    br i1 true, label [[FLOW5:%.*]], label [[FLOW]]
; CHECK:       B1:
; CHECK-NEXT:    br label [[FLOW4]]
; CHECK:       Flow4:
; CHECK-NEXT:    [[TMP3]] = phi i1 [ false, [[B1:%.*]] ], [ undef, [[IRR_GUARD1:%.*]] ]
; CHECK-NEXT:    [[TMP4]] = phi i1 [ false, [[B1]] ], [ true, [[IRR_GUARD1]] ]
; CHECK-NEXT:    br label [[FLOW3:%.*]]
; CHECK:       Flow5:
; CHECK-NEXT:    br i1 [[TMP2]], label [[B2:%.*]], label [[FLOW6:%.*]]
; CHECK:       B2:
; CHECK-NEXT:    br i1 [[PREDB2_INV]], label [[B3:%.*]], label [[FLOW7:%.*]]
; CHECK:       Flow6:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i1 [ [[TMP7:%.*]], [[FLOW7]] ], [ [[TMP0]], [[FLOW5]] ]
; CHECK-NEXT:    [[TMP6:%.*]] = phi i1 [ [[TMP8:%.*]], [[FLOW7]] ], [ true, [[FLOW5]] ]
; CHECK-NEXT:    br i1 [[TMP6]], label [[EXIT:%.*]], label [[IRR_GUARD]]
; CHECK:       B3:
; CHECK-NEXT:    br label [[FLOW7]]
; CHECK:       B4:
; CHECK-NEXT:    br label [[FLOW]]
; CHECK:       Flow7:
; CHECK-NEXT:    [[TMP7]] = phi i1 [ [[PREDB3:%.*]], [[B3]] ], [ undef, [[B2]] ]
; CHECK-NEXT:    [[TMP8]] = phi i1 [ false, [[B3]] ], [ true, [[B2]] ]
; CHECK-NEXT:    br label [[FLOW6]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       irr.guard:
; CHECK-NEXT:    [[GUARD_B1:%.*]] = phi i1 [ [[PREDENTRY:%.*]], [[ENTRY:%.*]] ], [ [[TMP5]], [[FLOW6]] ]
; CHECK-NEXT:    [[GUARD_B1_INV:%.*]] = xor i1 [[GUARD_B1]], true
; CHECK-NEXT:    br i1 [[GUARD_B1_INV]], label [[B4:%.*]], label [[FLOW]]
; CHECK:       Flow:
; CHECK-NEXT:    [[TMP9]] = phi i1 [ [[TMP0]], [[FLOW3]] ], [ undef, [[B4]] ], [ undef, [[IRR_GUARD]] ]
; CHECK-NEXT:    [[TMP10]] = phi i1 [ [[TMP1]], [[FLOW3]] ], [ false, [[B4]] ], [ true, [[IRR_GUARD]] ]
; CHECK-NEXT:    [[TMP11:%.*]] = phi i1 [ false, [[FLOW3]] ], [ [[PREDB4:%.*]], [[B4]] ], [ true, [[IRR_GUARD]] ]
; CHECK-NEXT:    br i1 [[TMP11]], label [[IRR_GUARD1]], label [[FLOW3]]
; CHECK:       irr.guard1:
; CHECK-NEXT:    br i1 [[TMP10]], label [[B1]], label [[FLOW4]]
;
{
entry:
  br i1 %PredEntry, label %B1, label %B4

B1:
  br i1 %PredB1, label %exit, label %B2

B2:
  br i1 %PredB2, label %exit, label %B3

B3:
  br i1 %PredB3, label %B1, label %B4

B4:
  br i1 %PredB4, label %B2, label %exit

exit:
  ret void
}
