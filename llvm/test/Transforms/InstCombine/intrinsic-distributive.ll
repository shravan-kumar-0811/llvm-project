; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=instcombine < %s 2>&1 | FileCheck %s

define i8 @umin_of_umax(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @umin_of_umax(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umin.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MIN:%.*]] = call i8 @llvm.umax.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MIN]]
;
  %max1 = call i8 @llvm.umax.i8(i8 %x, i8 %z)
  %max2 = call i8 @llvm.umax.i8(i8 %y, i8 %z)
  %min = call i8 @llvm.umin.i8(i8 %max1, i8 %max2)
  ret i8 %min
}

define i8 @umin_of_umax_comm(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @umin_of_umax_comm(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umin.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MIN:%.*]] = call i8 @llvm.umax.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MIN]]
;
  %max1 = call i8 @llvm.umax.i8(i8 %z, i8 %x)
  %max2 = call i8 @llvm.umax.i8(i8 %z, i8 %y)
  %min = call i8 @llvm.umin.i8(i8 %max1, i8 %max2)
  ret i8 %min
}

define i8 @smin_of_smax(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @smin_of_smax(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smin.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MIN:%.*]] = call i8 @llvm.smax.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MIN]]
;
  %max1 = call i8 @llvm.smax.i8(i8 %x, i8 %z)
  %max2 = call i8 @llvm.smax.i8(i8 %y, i8 %z)
  %min = call i8 @llvm.smin.i8(i8 %max1, i8 %max2)
  ret i8 %min
}

define i8 @smin_of_smax_comm(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @smin_of_smax_comm(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smin.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MIN:%.*]] = call i8 @llvm.smax.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MIN]]
;
  %max1 = call i8 @llvm.smax.i8(i8 %z, i8 %x)
  %max2 = call i8 @llvm.smax.i8(i8 %z, i8 %y)
  %min = call i8 @llvm.smin.i8(i8 %max1, i8 %max2)
  ret i8 %min
}

define i8 @umax_of_umin(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @umax_of_umin(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umax.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MAX:%.*]] = call i8 @llvm.umin.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MAX]]
;
  %min1 = call i8 @llvm.umin.i8(i8 %x, i8 %z)
  %min2 = call i8 @llvm.umin.i8(i8 %y, i8 %z)
  %max = call i8 @llvm.umax.i8(i8 %min1, i8 %min2)
  ret i8 %max
}

define i8 @umax_of_umin_comm(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @umax_of_umin_comm(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umax.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MAX:%.*]] = call i8 @llvm.umin.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MAX]]
;
  %min1 = call i8 @llvm.umin.i8(i8 %z, i8 %x)
  %min2 = call i8 @llvm.umin.i8(i8 %z, i8 %y)
  %max = call i8 @llvm.umax.i8(i8 %min1, i8 %min2)
  ret i8 %max
}

define i8 @smax_of_smin(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @smax_of_smin(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smax.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MAX:%.*]] = call i8 @llvm.smin.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MAX]]
;
  %min1 = call i8 @llvm.smin.i8(i8 %x, i8 %z)
  %min2 = call i8 @llvm.smin.i8(i8 %y, i8 %z)
  %max = call i8 @llvm.smax.i8(i8 %min1, i8 %min2)
  ret i8 %max
}

define i8 @smax_of_smin_comm(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @smax_of_smin_comm(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smax.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MAX:%.*]] = call i8 @llvm.smin.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MAX]]
;
  %min1 = call i8 @llvm.smin.i8(i8 %z, i8 %x)
  %min2 = call i8 @llvm.smin.i8(i8 %z, i8 %y)
  %max = call i8 @llvm.smax.i8(i8 %min1, i8 %min2)
  ret i8 %max
}

define i8 @umax_of_uadd_sat(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @umax_of_uadd_sat(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umax.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MAX:%.*]] = call i8 @llvm.uadd.sat.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MAX]]
;
  %add1 = call i8 @llvm.uadd.sat.i8(i8 %x, i8 %z)
  %add2 = call i8 @llvm.uadd.sat.i8(i8 %y, i8 %z)
  %max = call i8 @llvm.umax.i8(i8 %add1, i8 %add2)
  ret i8 %max
}

define i8 @umax_of_uadd_sat_comm(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @umax_of_uadd_sat_comm(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umax.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MAX:%.*]] = call i8 @llvm.uadd.sat.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MAX]]
;
  %add1 = call i8 @llvm.uadd.sat.i8(i8 %z, i8 %x)
  %add2 = call i8 @llvm.uadd.sat.i8(i8 %z, i8 %y)
  %max = call i8 @llvm.umax.i8(i8 %add1, i8 %add2)
  ret i8 %max
}

define i8 @umin_of_uadd_sat(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @umin_of_uadd_sat(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umin.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MIN:%.*]] = call i8 @llvm.uadd.sat.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MIN]]
;
  %add1 = call i8 @llvm.uadd.sat.i8(i8 %x, i8 %z)
  %add2 = call i8 @llvm.uadd.sat.i8(i8 %y, i8 %z)
  %min = call i8 @llvm.umin.i8(i8 %add1, i8 %add2)
  ret i8 %min
}

define i8 @umin_of_uadd_sat_comm(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @umin_of_uadd_sat_comm(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.umin.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MIN:%.*]] = call i8 @llvm.uadd.sat.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MIN]]
;
  %add1 = call i8 @llvm.uadd.sat.i8(i8 %z, i8 %x)
  %add2 = call i8 @llvm.uadd.sat.i8(i8 %z, i8 %y)
  %min = call i8 @llvm.umin.i8(i8 %add1, i8 %add2)
  ret i8 %min
}

define i8 @smax_of_sadd_sat(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @smax_of_sadd_sat(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smax.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MAX:%.*]] = call i8 @llvm.sadd.sat.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MAX]]
;
  %add1 = call i8 @llvm.sadd.sat.i8(i8 %x, i8 %z)
  %add2 = call i8 @llvm.sadd.sat.i8(i8 %y, i8 %z)
  %max = call i8 @llvm.smax.i8(i8 %add1, i8 %add2)
  ret i8 %max
}

define i8 @smax_of_sadd_sat_comm(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @smax_of_sadd_sat_comm(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smax.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MAX:%.*]] = call i8 @llvm.sadd.sat.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MAX]]
;
  %add1 = call i8 @llvm.sadd.sat.i8(i8 %z, i8 %x)
  %add2 = call i8 @llvm.sadd.sat.i8(i8 %z, i8 %y)
  %max = call i8 @llvm.smax.i8(i8 %add1, i8 %add2)
  ret i8 %max
}

define i8 @smin_of_sadd_sat(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @smin_of_sadd_sat(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smin.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MIN:%.*]] = call i8 @llvm.sadd.sat.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MIN]]
;
  %add1 = call i8 @llvm.sadd.sat.i8(i8 %x, i8 %z)
  %add2 = call i8 @llvm.sadd.sat.i8(i8 %y, i8 %z)
  %min = call i8 @llvm.smin.i8(i8 %add1, i8 %add2)
  ret i8 %min
}

define i8 @smin_of_sadd_sat_comm(i8 %x, i8 %y, i8 %z) {
; CHECK-LABEL: define i8 @smin_of_sadd_sat_comm(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]], i8 [[Z:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = call i8 @llvm.smin.i8(i8 [[X]], i8 [[Y]])
; CHECK-NEXT:    [[MIN:%.*]] = call i8 @llvm.sadd.sat.i8(i8 [[TMP1]], i8 [[Z]])
; CHECK-NEXT:    ret i8 [[MIN]]
;
  %add1 = call i8 @llvm.sadd.sat.i8(i8 %z, i8 %x)
  %add2 = call i8 @llvm.sadd.sat.i8(i8 %z, i8 %y)
  %min = call i8 @llvm.smin.i8(i8 %add1, i8 %add2)
  ret i8 %min
}
