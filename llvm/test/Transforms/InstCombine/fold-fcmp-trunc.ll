; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=instcombine -S < %s | FileCheck %s


define i1 @fcmp_trunc(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp oge double [[TMP0]], 1.000000e+02
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_with_nnan(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_nnan(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp nnan oge double [[TMP0]], 1.000000e+02
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp nnan oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_with_ninf(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_ninf(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp ninf oge double [[TMP0]], 1.000000e+02
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp ninf oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_with_nsz(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_nsz(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp nsz oge double [[TMP0]], 1.000000e+02
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp nsz oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_with_reassoc(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_reassoc(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp reassoc oge double [[TMP0]], 1.000000e+02
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp reassoc oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_with_fast(double %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_with_fast(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp fast oge double [[TMP0]], 1.000000e+02
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc double %0 to float
  %result = fcmp fast oge float %trunc, 1.000000e+02
  ret i1 %result
}

define <4 x i1> @fcmp_vec_trunc(<4 x double> %0) {
; CHECK-LABEL: define <4 x i1> @fcmp_vec_trunc(
; CHECK-SAME: <4 x double> [[TMP0:%.*]]) {
; CHECK-NEXT:    [[CMP:%.*]] = fcmp olt <4 x double> [[TMP0]], <double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 4.000000e+00>
; CHECK-NEXT:    ret <4 x i1> [[CMP]]
;
  %vec = fptrunc <4 x double> %0 to <4 x float>
  %cmp = fcmp olt <4 x float> %vec, <float 1.0, float 2.0, float 3.0, float 4.0>
  ret <4 x i1> %cmp
}

define <4 x i1> @fcmp_vec_trunc_with_flag(<4 x double> %0) {
; CHECK-LABEL: define <4 x i1> @fcmp_vec_trunc_with_flag(
; CHECK-SAME: <4 x double> [[TMP0:%.*]]) {
; CHECK-NEXT:    [[CMP:%.*]] = fcmp fast olt <4 x double> [[TMP0]], <double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 4.000000e+00>
; CHECK-NEXT:    ret <4 x i1> [[CMP]]
;
  %vec = fptrunc <4 x double> %0 to <4 x float>
  %cmp = fcmp fast olt <4 x float> %vec, <float 1.0, float 2.0, float 3.0, float 4.0>
  ret <4 x i1> %cmp
}

define i1 @fcmp_trunc_fp128(fp128 %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_fp128(
; CHECK-SAME: fp128 [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp fast oge fp128 [[TMP0]], 0xL00000000000000004005900000000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc fp128 %0 to float
  %result = fcmp fast oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_x86_fp80(x86_fp80 %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_x86_fp80(
; CHECK-SAME: x86_fp80 [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp fast oge x86_fp80 [[TMP0]], 0xK4005C800000000000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc x86_fp80 %0 to float
  %result = fcmp fast oge float %trunc, 1.000000e+02
  ret i1 %result
}

define i1 @fcmp_trunc_ppc_fp128(ppc_fp128 %0) {
; CHECK-LABEL: define i1 @fcmp_trunc_ppc_fp128(
; CHECK-SAME: ppc_fp128 [[TMP0:%.*]]) {
; CHECK-NEXT:    [[RESULT:%.*]] = fcmp fast oge ppc_fp128 [[TMP0]], 0xM40590000000000000000000000000000
; CHECK-NEXT:    ret i1 [[RESULT]]
;
  %trunc = fptrunc ppc_fp128 %0 to float
  %result = fcmp fast oge float %trunc, 1.000000e+02
  ret i1 %result
}

