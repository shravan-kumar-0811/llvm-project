; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=thumb-eabi -mcpu=arm1156t2-s -mattr=+thumb2 -show-mc-encoding %s -o - \
; RUN:  | FileCheck %s

define i32 @f1(i32 %a.s) {
; CHECK-LABEL: f1:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    movs r1, #3 @ encoding: [0x03,0x21]
; CHECK-NEXT:    cmp r0, #4 @ encoding: [0x04,0x28]
; CHECK-NEXT:    it eq @ encoding: [0x08,0xbf]
; CHECK-NEXT:    moveq r1, #2 @ encoding: [0x02,0x21]
; CHECK-NEXT:    mov r0, r1 @ encoding: [0x08,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
entry:

    %tmp = icmp eq i32 %a.s, 4
    %tmp1.s = select i1 %tmp, i32 2, i32 3
    ret i32 %tmp1.s
}

define i32 @f2(i32 %a.s) {
; CHECK-LABEL: f2:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    movs r1, #3 @ encoding: [0x03,0x21]
; CHECK-NEXT:    cmp r0, #4 @ encoding: [0x04,0x28]
; CHECK-NEXT:    it gt @ encoding: [0xc8,0xbf]
; CHECK-NEXT:    movgt r1, #2 @ encoding: [0x02,0x21]
; CHECK-NEXT:    mov r0, r1 @ encoding: [0x08,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
entry:
    %tmp = icmp sgt i32 %a.s, 4
    %tmp1.s = select i1 %tmp, i32 2, i32 3
    ret i32 %tmp1.s
}

define i32 @f3(i32 %a.s, i32 %b.s) {
; CHECK-LABEL: f3:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    movs r2, #3 @ encoding: [0x03,0x22]
; CHECK-NEXT:    cmp r0, r1 @ encoding: [0x88,0x42]
; CHECK-NEXT:    it lt @ encoding: [0xb8,0xbf]
; CHECK-NEXT:    movlt r2, #2 @ encoding: [0x02,0x22]
; CHECK-NEXT:    mov r0, r2 @ encoding: [0x10,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
entry:
    %tmp = icmp slt i32 %a.s, %b.s
    %tmp1.s = select i1 %tmp, i32 2, i32 3
    ret i32 %tmp1.s
}

define i32 @f4(i32 %a.s, i32 %b.s) {
; CHECK-LABEL: f4:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    movs r2, #3 @ encoding: [0x03,0x22]
; CHECK-NEXT:    cmp r0, r1 @ encoding: [0x88,0x42]
; CHECK-NEXT:    it le @ encoding: [0xd8,0xbf]
; CHECK-NEXT:    movle r2, #2 @ encoding: [0x02,0x22]
; CHECK-NEXT:    mov r0, r2 @ encoding: [0x10,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
entry:

    %tmp = icmp sle i32 %a.s, %b.s
    %tmp1.s = select i1 %tmp, i32 2, i32 3
    ret i32 %tmp1.s
}

define i32 @f5(i32 %a.u, i32 %b.u) {
; CHECK-LABEL: f5:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    movs r2, #3 @ encoding: [0x03,0x22]
; CHECK-NEXT:    cmp r0, r1 @ encoding: [0x88,0x42]
; CHECK-NEXT:    it ls @ encoding: [0x98,0xbf]
; CHECK-NEXT:    movls r2, #2 @ encoding: [0x02,0x22]
; CHECK-NEXT:    mov r0, r2 @ encoding: [0x10,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
entry:
    %tmp = icmp ule i32 %a.u, %b.u
    %tmp1.s = select i1 %tmp, i32 2, i32 3
    ret i32 %tmp1.s
}

define i32 @f6(i32 %a.u, i32 %b.u) {
; CHECK-LABEL: f6:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    movs r2, #3 @ encoding: [0x03,0x22]
; CHECK-NEXT:    cmp r0, r1 @ encoding: [0x88,0x42]
; CHECK-NEXT:    it hi @ encoding: [0x88,0xbf]
; CHECK-NEXT:    movhi r2, #2 @ encoding: [0x02,0x22]
; CHECK-NEXT:    mov r0, r2 @ encoding: [0x10,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
entry:
    %tmp = icmp ugt i32 %a.u, %b.u
    %tmp1.s = select i1 %tmp, i32 2, i32 3
    ret i32 %tmp1.s
}

define i32 @f7(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: f7:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    mov.w r3, #1431655765 @ encoding: [0x4f,0xf0,0x55,0x33]
; CHECK-NEXT:    umull r3, r2, r2, r3 @ encoding: [0xa2,0xfb,0x03,0x32]
; CHECK-NEXT:    cmp r0, r1 @ encoding: [0x88,0x42]
; CHECK-NEXT:    it ls @ encoding: [0x98,0xbf]
; CHECK-NEXT:    movls r2, #3 @ encoding: [0x03,0x22]
; CHECK-NEXT:    mov r0, r2 @ encoding: [0x10,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
entry:
    %tmp1 = icmp ugt i32 %a, %b
    %tmp2 = udiv i32 %c, 3
    %tmp3 = select i1 %tmp1, i32 %tmp2, i32 3
    ret i32 %tmp3
}

define i32 @f8(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: f8:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    movs r3, #3 @ encoding: [0x03,0x23]
; CHECK-NEXT:    cmp r0, r1 @ encoding: [0x88,0x42]
; CHECK-NEXT:    it lo @ encoding: [0x38,0xbf]
; CHECK-NEXT:    lsllo r3, r2, #2 @ encoding: [0x93,0x00]
; CHECK-NEXT:    mov r0, r3 @ encoding: [0x18,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
entry:
    %tmp1 = icmp ult i32 %a, %b
    %tmp2 = mul i32 %c, 4
    %tmp3 = select i1 %tmp1, i32 %tmp2, i32 3
    ret i32 %tmp3
}

define i32 @f9(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: f9:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    movs r3, #3 @ encoding: [0x03,0x23]
; CHECK-NEXT:    cmp r0, r1 @ encoding: [0x88,0x42]
; CHECK-NEXT:    it ge @ encoding: [0xa8,0xbf]
; CHECK-NEXT:    rorge.w r3, r2, #22 @ encoding: [0x4f,0xea,0xb2,0x53]
; CHECK-NEXT:    mov r0, r3 @ encoding: [0x18,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
entry:
    %tmp1 = icmp sge i32 %a, %b
    %tmp2 = shl i32 %c, 10
    %tmp3 = lshr i32 %c, 22
    %tmp4 = or i32 %tmp2, %tmp3
    %tmp5 = select i1 %tmp1, i32 %tmp4, i32 3
    ret i32 %tmp5
}

define i32 @f10(i32 %a, i32 %b) {
; CHECK-LABEL: f10:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    movw r2, #12345 @ encoding: [0x43,0xf2,0x39,0x02]
; CHECK-NEXT:    cmp r0, r1 @ encoding: [0x88,0x42]
; CHECK-NEXT:    it ne @ encoding: [0x18,0xbf]
; CHECK-NEXT:    movwne r2, #1234 @ encoding: [0x40,0xf2,0xd2,0x42]
; CHECK-NEXT:    mov r0, r2 @ encoding: [0x10,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
    %tst = icmp ne i32 %a, %b
    %val = select i1 %tst, i32 1234, i32 12345
    ret i32 %val
}

; Make sure we pick the Thumb encoding for movw/movt
define i32 @f11(i32 %a, i32 %b) {
; CHECK-LABEL: f11:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    movw r2, #49977 @ encoding: [0x4c,0xf2,0x39,0x32]
; CHECK-NEXT:    movt r2, #8288 @ encoding: [0xc2,0xf2,0x60,0x02]
; CHECK-NEXT:    cmp r0, r1 @ encoding: [0x88,0x42]
; CHECK-NEXT:    itt ne @ encoding: [0x1c,0xbf]
; CHECK-NEXT:    movwne r2, #50033 @ encoding: [0x4c,0xf2,0x71,0x32]
; CHECK-NEXT:    movtne r2, #1883 @ encoding: [0xc0,0xf2,0x5b,0x72]
; CHECK-NEXT:    mov r0, r2 @ encoding: [0x10,0x46]
; CHECK-NEXT:    bx lr @ encoding: [0x70,0x47]
    %tst = icmp ne i32 %a, %b
    %val = select i1 %tst, i32 123454321, i32 543212345
    ret i32 %val
}
