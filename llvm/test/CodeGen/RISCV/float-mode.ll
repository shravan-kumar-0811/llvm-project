; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=riscv32 -mattr=+f -verify-machineinstrs -target-abi=ilp32f < %s | FileCheck --check-prefix=FLOAT %s
; RUN: llc -mtriple=riscv32 -mattr=+zfinx -verify-machineinstrs -target-abi=ilp32 < %s | FileCheck --check-prefix=FINT %s
; RUN: llc -mtriple=riscv64 -mattr=+f -verify-machineinstrs -target-abi=lp64f < %s | FileCheck --check-prefix=FLOAT %s
; RUN: llc -mtriple=riscv64 -mattr=+zfinx -verify-machineinstrs -target-abi=lp64 < %s | FileCheck --check-prefix=FINT %s


define float @add_dyn(float %x, float %y) strictfp nounwind {
; FLOAT-LABEL: add_dyn:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fadd.s fa0, fa0, fa1
; FLOAT-NEXT:    ret
;
; FINT-LABEL: add_dyn:
; FINT:       # %bb.0:
; FINT-NEXT:    fadd.s a0, a0, a1
; FINT-NEXT:    ret
  %add = tail call float @llvm.experimental.constrained.fadd.f32(float %x, float %y, metadata !"round.dynamic", metadata !"fpexcept.ignore") strictfp
  ret float %add
}

define float @add_rte(float %x, float %y) strictfp nounwind {
; FLOAT-LABEL: add_rte:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fadd.s fa0, fa0, fa1, rne
; FLOAT-NEXT:    ret
;
; FINT-LABEL: add_rte:
; FINT:       # %bb.0:
; FINT-NEXT:    fadd.s a0, a0, a1, rne
; FINT-NEXT:    ret
  %add = tail call float @llvm.experimental.constrained.fadd.f32(float %x, float %y, metadata !"round.tonearest", metadata !"fpexcept.ignore") strictfp
  ret float %add
}

define float @add_rtz(float %x, float %y) strictfp nounwind {
; FLOAT-LABEL: add_rtz:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fadd.s fa0, fa0, fa1, rtz
; FLOAT-NEXT:    ret
;
; FINT-LABEL: add_rtz:
; FINT:       # %bb.0:
; FINT-NEXT:    fadd.s a0, a0, a1, rtz
; FINT-NEXT:    ret
  %add = tail call float @llvm.experimental.constrained.fadd.f32(float %x, float %y, metadata !"round.towardzero", metadata !"fpexcept.ignore") strictfp
  ret float %add
}

define float @add_rup(float %x, float %y) strictfp nounwind {
; FLOAT-LABEL: add_rup:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fadd.s fa0, fa0, fa1, rup
; FLOAT-NEXT:    ret
;
; FINT-LABEL: add_rup:
; FINT:       # %bb.0:
; FINT-NEXT:    fadd.s a0, a0, a1, rup
; FINT-NEXT:    ret
  %add = tail call float @llvm.experimental.constrained.fadd.f32(float %x, float %y, metadata !"round.upward", metadata !"fpexcept.ignore") strictfp
  ret float %add
}

define float @add_rdn(float %x, float %y) strictfp nounwind {
; FLOAT-LABEL: add_rdn:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fadd.s fa0, fa0, fa1, rdn
; FLOAT-NEXT:    ret
;
; FINT-LABEL: add_rdn:
; FINT:       # %bb.0:
; FINT-NEXT:    fadd.s a0, a0, a1, rdn
; FINT-NEXT:    ret
  %add = tail call float @llvm.experimental.constrained.fadd.f32(float %x, float %y, metadata !"round.downward", metadata !"fpexcept.ignore") strictfp
  ret float %add
}

define float @add_rmm(float %x, float %y) strictfp nounwind {
; FLOAT-LABEL: add_rmm:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fadd.s fa0, fa0, fa1, rmm
; FLOAT-NEXT:    ret
;
; FINT-LABEL: add_rmm:
; FINT:       # %bb.0:
; FINT-NEXT:    fadd.s a0, a0, a1, rmm
; FINT-NEXT:    ret
  %add = tail call float @llvm.experimental.constrained.fadd.f32(float %x, float %y, metadata !"round.tonearestaway", metadata !"fpexcept.ignore") strictfp
  ret float %add
}

define float @sub_rup(float %x, float %y) strictfp nounwind {
; FLOAT-LABEL: sub_rup:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fsub.s fa0, fa0, fa1, rup
; FLOAT-NEXT:    ret
;
; FINT-LABEL: sub_rup:
; FINT:       # %bb.0:
; FINT-NEXT:    fsub.s a0, a0, a1, rup
; FINT-NEXT:    ret
  %sub = tail call float @llvm.experimental.constrained.fsub.f32(float %x, float %y, metadata !"round.upward", metadata !"fpexcept.ignore") strictfp
  ret float %sub
}

define float @mul_rup(float %x, float %y) strictfp nounwind {
; FLOAT-LABEL: mul_rup:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fmul.s fa0, fa0, fa1, rup
; FLOAT-NEXT:    ret
;
; FINT-LABEL: mul_rup:
; FINT:       # %bb.0:
; FINT-NEXT:    fmul.s a0, a0, a1, rup
; FINT-NEXT:    ret
  %mul = tail call float @llvm.experimental.constrained.fmul.f32(float %x, float %y, metadata !"round.upward", metadata !"fpexcept.ignore") strictfp
  ret float %mul
}

define float @div_rup(float %x, float %y) strictfp nounwind {
; FLOAT-LABEL: div_rup:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fdiv.s fa0, fa0, fa1, rup
; FLOAT-NEXT:    ret
;
; FINT-LABEL: div_rup:
; FINT:       # %bb.0:
; FINT-NEXT:    fdiv.s a0, a0, a1, rup
; FINT-NEXT:    ret
  %div = tail call float @llvm.experimental.constrained.fdiv.f32(float %x, float %y, metadata !"round.upward", metadata !"fpexcept.ignore") strictfp
  ret float %div
}

define float @sqrt_rdn(float %x) strictfp nounwind {
; FLOAT-LABEL: sqrt_rdn:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fsqrt.s fa0, fa0, rdn
; FLOAT-NEXT:    ret
;
; FINT-LABEL: sqrt_rdn:
; FINT:       # %bb.0:
; FINT-NEXT:    fsqrt.s a0, a0, rdn
; FINT-NEXT:    ret
  %sqrt = tail call float @llvm.experimental.constrained.sqrt.f32(float %x, metadata !"round.downward", metadata !"fpexcept.ignore") strictfp
  ret float %sqrt
}

define float @fmadd_rup(float %a, float %b, float %c) nounwind strictfp {
; FLOAT-LABEL: fmadd_rup:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fmadd.s fa0, fa0, fa1, fa2, rup
; FLOAT-NEXT:    ret
;
; FINT-LABEL: fmadd_rup:
; FINT:       # %bb.0:
; FINT-NEXT:    fmadd.s a0, a0, a1, a2, rup
; FINT-NEXT:    ret
  %1 = call float @llvm.experimental.constrained.fma.f32(float %a, float %b, float %c, metadata !"round.upward", metadata !"fpexcept.ignore") strictfp
  ret float %1
}

define float @fmsub_rdn(float %a, float %b, float %c) nounwind strictfp {
; FLOAT-LABEL: fmsub_rdn:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fmv.w.x fa5, zero
; FLOAT-NEXT:    fadd.s fa5, fa2, fa5
; FLOAT-NEXT:    fmsub.s fa0, fa0, fa1, fa5, rdn
; FLOAT-NEXT:    ret
;
; FINT-LABEL: fmsub_rdn:
; FINT:       # %bb.0:
; FINT-NEXT:    fadd.s a2, a2, zero
; FINT-NEXT:    fmsub.s a0, a0, a1, a2, rdn
; FINT-NEXT:    ret
  %c_ = fadd float 0.0, %c ; avoid negation using xor
  %negc = fneg float %c_
  %1 = call float @llvm.experimental.constrained.fma.f32(float %a, float %b, float %negc, metadata !"round.downward", metadata !"fpexcept.ignore") strictfp
  ret float %1
}

define float @fnmadd_rtz(float %a, float %b, float %c) nounwind strictfp {
; FLOAT-LABEL: fnmadd_rtz:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fmv.w.x fa5, zero
; FLOAT-NEXT:    fadd.s fa4, fa0, fa5
; FLOAT-NEXT:    fadd.s fa5, fa2, fa5
; FLOAT-NEXT:    fnmadd.s fa0, fa4, fa1, fa5, rtz
; FLOAT-NEXT:    ret
;
; FINT-LABEL: fnmadd_rtz:
; FINT:       # %bb.0:
; FINT-NEXT:    fadd.s a0, a0, zero
; FINT-NEXT:    fadd.s a2, a2, zero
; FINT-NEXT:    fnmadd.s a0, a0, a1, a2, rtz
; FINT-NEXT:    ret
  %a_ = fadd float 0.0, %a
  %c_ = fadd float 0.0, %c
  %nega = fneg float %a_
  %negc = fneg float %c_
  %1 = call float @llvm.experimental.constrained.fma.f32(float %nega, float %b, float %negc, metadata !"round.towardzero", metadata !"fpexcept.ignore") strictfp
  ret float %1
}

define float @fnmsub_rte(float %a, float %b, float %c) nounwind strictfp {
; FLOAT-LABEL: fnmsub_rte:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fmv.w.x fa5, zero
; FLOAT-NEXT:    fadd.s fa5, fa0, fa5
; FLOAT-NEXT:    fnmsub.s fa0, fa5, fa1, fa2, rne
; FLOAT-NEXT:    ret
;
; FINT-LABEL: fnmsub_rte:
; FINT:       # %bb.0:
; FINT-NEXT:    fadd.s a0, a0, zero
; FINT-NEXT:    fnmsub.s a0, a0, a1, a2, rne
; FINT-NEXT:    ret
  %a_ = fadd float 0.0, %a
  %nega = fneg float %a_
  %1 = call float @llvm.experimental.constrained.fma.f32(float %nega, float %b, float %c, metadata !"round.tonearest", metadata !"fpexcept.ignore") strictfp
  ret float %1
}

define float @sitofp_rmm(i32 %a) nounwind strictfp {
; FLOAT-LABEL: sitofp_rmm:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fcvt.s.w fa0, a0, rmm
; FLOAT-NEXT:    ret
;
; FINT-LABEL: sitofp_rmm:
; FINT:       # %bb.0:
; FINT-NEXT:    fcvt.s.w a0, a0, rmm
; FINT-NEXT:    ret
  %1 = call float @llvm.experimental.constrained.sitofp.f32.i32(i32 %a, metadata !"round.tonearestaway", metadata !"fpexcept.ignore") strictfp
  ret float %1
}

define float @uitofp_rne(i32 %a) nounwind strictfp {
; FLOAT-LABEL: uitofp_rne:
; FLOAT:       # %bb.0:
; FLOAT-NEXT:    fcvt.s.wu fa0, a0, rne
; FLOAT-NEXT:    ret
;
; FINT-LABEL: uitofp_rne:
; FINT:       # %bb.0:
; FINT-NEXT:    fcvt.s.wu a0, a0, rne
; FINT-NEXT:    ret
  %1 = call float @llvm.experimental.constrained.uitofp.f32.i32(i32 %a, metadata !"round.tonearest", metadata !"fpexcept.ignore") strictfp
  ret float %1
}
