; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=riscv32 -mattr=+m \
; RUN:   | FileCheck %s --check-prefixes=RV32-BOTH,RV32
; RUN: llc < %s -mtriple=riscv64 -mattr=+m \
; RUN:   | FileCheck %s --check-prefixes=RV64-BOTH,RV64
; RUN: llc < %s -mtriple=riscv32 -mattr=+m,+unaligned-scalar-mem \
; RUN:   | FileCheck %s --check-prefixes=RV32-BOTH,RV32-FAST
; RUN: llc < %s -mtriple=riscv64 -mattr=+m,+unaligned-scalar-mem \
; RUN:   | FileCheck %s --check-prefixes=RV64-BOTH,RV64-FAST

define void @memset_1(ptr %a, i128 %value) nounwind {
; RV32-BOTH-LABEL: memset_1:
; RV32-BOTH:       # %bb.0:
; RV32-BOTH-NEXT:    lw a1, 0(a1)
; RV32-BOTH-NEXT:    sb a1, 0(a0)
; RV32-BOTH-NEXT:    ret
;
; RV64-BOTH-LABEL: memset_1:
; RV64-BOTH:       # %bb.0:
; RV64-BOTH-NEXT:    sb a1, 0(a0)
; RV64-BOTH-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 1, i1 0)
  ret void
}

define void @memset_2(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_2:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a1, 0(a1)
; RV32-NEXT:    sb a1, 0(a0)
; RV32-NEXT:    srli a1, a1, 8
; RV32-NEXT:    sb a1, 1(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_2:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    srli a1, a1, 8
; RV64-NEXT:    sb a1, 1(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_2:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a1, 0(a1)
; RV32-FAST-NEXT:    sh a1, 0(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_2:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sh a1, 0(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 2, i1 0)
  ret void
}

define void @memset_3(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_3:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a1, 0(a1)
; RV32-NEXT:    sb a1, 0(a0)
; RV32-NEXT:    srli a2, a1, 8
; RV32-NEXT:    sb a2, 1(a0)
; RV32-NEXT:    srli a1, a1, 16
; RV32-NEXT:    sb a1, 2(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_3:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    srli a2, a1, 8
; RV64-NEXT:    sb a2, 1(a0)
; RV64-NEXT:    srli a1, a1, 16
; RV64-NEXT:    sb a1, 2(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_3:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a1, 0(a1)
; RV32-FAST-NEXT:    sh a1, 0(a0)
; RV32-FAST-NEXT:    srli a1, a1, 16
; RV32-FAST-NEXT:    sb a1, 2(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_3:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sh a1, 0(a0)
; RV64-FAST-NEXT:    srli a1, a1, 16
; RV64-FAST-NEXT:    sb a1, 2(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 3, i1 0)
  ret void
}

define void @memset_4(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_4:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a1, 0(a1)
; RV32-NEXT:    sb a1, 0(a0)
; RV32-NEXT:    srli a2, a1, 24
; RV32-NEXT:    sb a2, 3(a0)
; RV32-NEXT:    srli a2, a1, 16
; RV32-NEXT:    sb a2, 2(a0)
; RV32-NEXT:    srli a1, a1, 8
; RV32-NEXT:    sb a1, 1(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_4:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    srli a2, a1, 24
; RV64-NEXT:    sb a2, 3(a0)
; RV64-NEXT:    srli a2, a1, 16
; RV64-NEXT:    sb a2, 2(a0)
; RV64-NEXT:    srli a1, a1, 8
; RV64-NEXT:    sb a1, 1(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_4:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a1, 0(a1)
; RV32-FAST-NEXT:    sw a1, 0(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_4:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sw a1, 0(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 4, i1 0)
  ret void
}

define void @memset_5(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_5:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a2, 0(a1)
; RV32-NEXT:    lw a1, 4(a1)
; RV32-NEXT:    sb a2, 0(a0)
; RV32-NEXT:    sb a1, 4(a0)
; RV32-NEXT:    srli a1, a2, 24
; RV32-NEXT:    sb a1, 3(a0)
; RV32-NEXT:    srli a1, a2, 16
; RV32-NEXT:    sb a1, 2(a0)
; RV32-NEXT:    srli a2, a2, 8
; RV32-NEXT:    sb a2, 1(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_5:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    srli a2, a1, 24
; RV64-NEXT:    sb a2, 3(a0)
; RV64-NEXT:    srli a2, a1, 16
; RV64-NEXT:    sb a2, 2(a0)
; RV64-NEXT:    srli a2, a1, 8
; RV64-NEXT:    sb a2, 1(a0)
; RV64-NEXT:    srli a1, a1, 32
; RV64-NEXT:    sb a1, 4(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_5:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a2, 4(a1)
; RV32-FAST-NEXT:    lw a1, 0(a1)
; RV32-FAST-NEXT:    sb a2, 4(a0)
; RV32-FAST-NEXT:    sw a1, 0(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_5:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sw a1, 0(a0)
; RV64-FAST-NEXT:    srli a1, a1, 32
; RV64-FAST-NEXT:    sb a1, 4(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 5, i1 0)
  ret void
}

define void @memset_6(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_6:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a2, 4(a1)
; RV32-NEXT:    lw a1, 0(a1)
; RV32-NEXT:    sb a2, 4(a0)
; RV32-NEXT:    sb a1, 0(a0)
; RV32-NEXT:    srli a2, a2, 8
; RV32-NEXT:    sb a2, 5(a0)
; RV32-NEXT:    srli a2, a1, 24
; RV32-NEXT:    sb a2, 3(a0)
; RV32-NEXT:    srli a2, a1, 16
; RV32-NEXT:    sb a2, 2(a0)
; RV32-NEXT:    srli a1, a1, 8
; RV32-NEXT:    sb a1, 1(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_6:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    srli a2, a1, 40
; RV64-NEXT:    sb a2, 5(a0)
; RV64-NEXT:    srli a2, a1, 32
; RV64-NEXT:    sb a2, 4(a0)
; RV64-NEXT:    srli a2, a1, 24
; RV64-NEXT:    sb a2, 3(a0)
; RV64-NEXT:    srli a2, a1, 16
; RV64-NEXT:    sb a2, 2(a0)
; RV64-NEXT:    srli a1, a1, 8
; RV64-NEXT:    sb a1, 1(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_6:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a2, 4(a1)
; RV32-FAST-NEXT:    lw a1, 0(a1)
; RV32-FAST-NEXT:    sh a2, 4(a0)
; RV32-FAST-NEXT:    sw a1, 0(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_6:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sw a1, 0(a0)
; RV64-FAST-NEXT:    srli a1, a1, 32
; RV64-FAST-NEXT:    sh a1, 4(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 6, i1 0)
  ret void
}

define void @memset_7(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_7:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a2, 4(a1)
; RV32-NEXT:    lw a1, 0(a1)
; RV32-NEXT:    sb a2, 4(a0)
; RV32-NEXT:    sb a1, 0(a0)
; RV32-NEXT:    srli a3, a2, 8
; RV32-NEXT:    sb a3, 5(a0)
; RV32-NEXT:    srli a2, a2, 16
; RV32-NEXT:    sb a2, 6(a0)
; RV32-NEXT:    srli a2, a1, 24
; RV32-NEXT:    sb a2, 3(a0)
; RV32-NEXT:    srli a2, a1, 16
; RV32-NEXT:    sb a2, 2(a0)
; RV32-NEXT:    srli a1, a1, 8
; RV32-NEXT:    sb a1, 1(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_7:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    srli a2, a1, 40
; RV64-NEXT:    sb a2, 5(a0)
; RV64-NEXT:    srli a2, a1, 32
; RV64-NEXT:    sb a2, 4(a0)
; RV64-NEXT:    srli a2, a1, 48
; RV64-NEXT:    sb a2, 6(a0)
; RV64-NEXT:    srli a2, a1, 24
; RV64-NEXT:    sb a2, 3(a0)
; RV64-NEXT:    srli a2, a1, 16
; RV64-NEXT:    sb a2, 2(a0)
; RV64-NEXT:    srli a1, a1, 8
; RV64-NEXT:    sb a1, 1(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_7:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a2, 4(a1)
; RV32-FAST-NEXT:    lw a1, 0(a1)
; RV32-FAST-NEXT:    sh a2, 4(a0)
; RV32-FAST-NEXT:    sw a1, 0(a0)
; RV32-FAST-NEXT:    srli a2, a2, 16
; RV32-FAST-NEXT:    sb a2, 6(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_7:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sw a1, 0(a0)
; RV64-FAST-NEXT:    srli a2, a1, 48
; RV64-FAST-NEXT:    sb a2, 6(a0)
; RV64-FAST-NEXT:    srli a1, a1, 32
; RV64-FAST-NEXT:    sh a1, 4(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 7, i1 0)
  ret void
}

define void @memset_8(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_8:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a2, 4(a1)
; RV32-NEXT:    lw a1, 0(a1)
; RV32-NEXT:    sb a2, 4(a0)
; RV32-NEXT:    sb a1, 0(a0)
; RV32-NEXT:    srli a3, a2, 24
; RV32-NEXT:    sb a3, 7(a0)
; RV32-NEXT:    srli a3, a2, 16
; RV32-NEXT:    sb a3, 6(a0)
; RV32-NEXT:    srli a2, a2, 8
; RV32-NEXT:    sb a2, 5(a0)
; RV32-NEXT:    srli a2, a1, 24
; RV32-NEXT:    sb a2, 3(a0)
; RV32-NEXT:    srli a2, a1, 16
; RV32-NEXT:    sb a2, 2(a0)
; RV32-NEXT:    srli a1, a1, 8
; RV32-NEXT:    sb a1, 1(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_8:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    srli a2, a1, 56
; RV64-NEXT:    sb a2, 7(a0)
; RV64-NEXT:    srli a2, a1, 48
; RV64-NEXT:    sb a2, 6(a0)
; RV64-NEXT:    srli a2, a1, 40
; RV64-NEXT:    sb a2, 5(a0)
; RV64-NEXT:    srli a2, a1, 32
; RV64-NEXT:    sb a2, 4(a0)
; RV64-NEXT:    srli a2, a1, 24
; RV64-NEXT:    sb a2, 3(a0)
; RV64-NEXT:    srli a2, a1, 16
; RV64-NEXT:    sb a2, 2(a0)
; RV64-NEXT:    srli a1, a1, 8
; RV64-NEXT:    sb a1, 1(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_8:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a2, 4(a1)
; RV32-FAST-NEXT:    lw a1, 0(a1)
; RV32-FAST-NEXT:    sw a2, 4(a0)
; RV32-FAST-NEXT:    sw a1, 0(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_8:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sd a1, 0(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 8, i1 0)
  ret void
}

define void @memset_9(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_9:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a2, 4(a1)
; RV32-NEXT:    lw a3, 0(a1)
; RV32-NEXT:    lw a1, 8(a1)
; RV32-NEXT:    sb a2, 4(a0)
; RV32-NEXT:    sb a3, 0(a0)
; RV32-NEXT:    sb a1, 8(a0)
; RV32-NEXT:    srli a1, a2, 24
; RV32-NEXT:    sb a1, 7(a0)
; RV32-NEXT:    srli a1, a2, 16
; RV32-NEXT:    sb a1, 6(a0)
; RV32-NEXT:    srli a2, a2, 8
; RV32-NEXT:    sb a2, 5(a0)
; RV32-NEXT:    srli a1, a3, 24
; RV32-NEXT:    sb a1, 3(a0)
; RV32-NEXT:    srli a1, a3, 16
; RV32-NEXT:    sb a1, 2(a0)
; RV32-NEXT:    srli a3, a3, 8
; RV32-NEXT:    sb a3, 1(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_9:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    sb a2, 8(a0)
; RV64-NEXT:    srli a2, a1, 56
; RV64-NEXT:    sb a2, 7(a0)
; RV64-NEXT:    srli a2, a1, 48
; RV64-NEXT:    sb a2, 6(a0)
; RV64-NEXT:    srli a2, a1, 40
; RV64-NEXT:    sb a2, 5(a0)
; RV64-NEXT:    srli a2, a1, 32
; RV64-NEXT:    sb a2, 4(a0)
; RV64-NEXT:    srli a2, a1, 24
; RV64-NEXT:    sb a2, 3(a0)
; RV64-NEXT:    srli a2, a1, 16
; RV64-NEXT:    sb a2, 2(a0)
; RV64-NEXT:    srli a1, a1, 8
; RV64-NEXT:    sb a1, 1(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_9:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a2, 4(a1)
; RV32-FAST-NEXT:    lw a3, 0(a1)
; RV32-FAST-NEXT:    lw a1, 8(a1)
; RV32-FAST-NEXT:    sw a2, 4(a0)
; RV32-FAST-NEXT:    sw a3, 0(a0)
; RV32-FAST-NEXT:    sb a1, 8(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_9:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sb a2, 8(a0)
; RV64-FAST-NEXT:    sd a1, 0(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 9, i1 0)
  ret void
}

define void @memset_16(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_16:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a2, 12(a1)
; RV32-NEXT:    lw a3, 8(a1)
; RV32-NEXT:    lw a4, 4(a1)
; RV32-NEXT:    lw a1, 0(a1)
; RV32-NEXT:    sb a2, 12(a0)
; RV32-NEXT:    sb a3, 8(a0)
; RV32-NEXT:    sb a4, 4(a0)
; RV32-NEXT:    sb a1, 0(a0)
; RV32-NEXT:    srli a5, a2, 24
; RV32-NEXT:    sb a5, 15(a0)
; RV32-NEXT:    srli a5, a2, 16
; RV32-NEXT:    sb a5, 14(a0)
; RV32-NEXT:    srli a2, a2, 8
; RV32-NEXT:    sb a2, 13(a0)
; RV32-NEXT:    srli a2, a3, 24
; RV32-NEXT:    sb a2, 11(a0)
; RV32-NEXT:    srli a2, a3, 16
; RV32-NEXT:    sb a2, 10(a0)
; RV32-NEXT:    srli a3, a3, 8
; RV32-NEXT:    sb a3, 9(a0)
; RV32-NEXT:    srli a2, a4, 24
; RV32-NEXT:    sb a2, 7(a0)
; RV32-NEXT:    srli a2, a4, 16
; RV32-NEXT:    sb a2, 6(a0)
; RV32-NEXT:    srli a4, a4, 8
; RV32-NEXT:    sb a4, 5(a0)
; RV32-NEXT:    srli a2, a1, 24
; RV32-NEXT:    sb a2, 3(a0)
; RV32-NEXT:    srli a2, a1, 16
; RV32-NEXT:    sb a2, 2(a0)
; RV32-NEXT:    srli a1, a1, 8
; RV32-NEXT:    sb a1, 1(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_16:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a2, 8(a0)
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    srli a3, a2, 56
; RV64-NEXT:    sb a3, 15(a0)
; RV64-NEXT:    srli a3, a2, 48
; RV64-NEXT:    sb a3, 14(a0)
; RV64-NEXT:    srli a3, a2, 40
; RV64-NEXT:    sb a3, 13(a0)
; RV64-NEXT:    srli a3, a2, 32
; RV64-NEXT:    sb a3, 12(a0)
; RV64-NEXT:    srli a3, a2, 24
; RV64-NEXT:    sb a3, 11(a0)
; RV64-NEXT:    srli a3, a2, 16
; RV64-NEXT:    sb a3, 10(a0)
; RV64-NEXT:    srli a2, a2, 8
; RV64-NEXT:    sb a2, 9(a0)
; RV64-NEXT:    srli a2, a1, 56
; RV64-NEXT:    sb a2, 7(a0)
; RV64-NEXT:    srli a2, a1, 48
; RV64-NEXT:    sb a2, 6(a0)
; RV64-NEXT:    srli a2, a1, 40
; RV64-NEXT:    sb a2, 5(a0)
; RV64-NEXT:    srli a2, a1, 32
; RV64-NEXT:    sb a2, 4(a0)
; RV64-NEXT:    srli a2, a1, 24
; RV64-NEXT:    sb a2, 3(a0)
; RV64-NEXT:    srli a2, a1, 16
; RV64-NEXT:    sb a2, 2(a0)
; RV64-NEXT:    srli a1, a1, 8
; RV64-NEXT:    sb a1, 1(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_16:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a2, 12(a1)
; RV32-FAST-NEXT:    lw a3, 8(a1)
; RV32-FAST-NEXT:    lw a4, 4(a1)
; RV32-FAST-NEXT:    lw a1, 0(a1)
; RV32-FAST-NEXT:    sw a2, 12(a0)
; RV32-FAST-NEXT:    sw a3, 8(a0)
; RV32-FAST-NEXT:    sw a4, 4(a0)
; RV32-FAST-NEXT:    sw a1, 0(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_16:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sd a2, 8(a0)
; RV64-FAST-NEXT:    sd a1, 0(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 16, i1 0)
  ret void
}

define void @memset_17(ptr %a, i128 %value) nounwind {
; RV32-LABEL: memset_17:
; RV32:       # %bb.0:
; RV32-NEXT:    lw a2, 12(a1)
; RV32-NEXT:    lw a3, 8(a1)
; RV32-NEXT:    lw a4, 4(a1)
; RV32-NEXT:    lw a1, 0(a1)
; RV32-NEXT:    sb a2, 12(a0)
; RV32-NEXT:    sb a3, 8(a0)
; RV32-NEXT:    sb a4, 4(a0)
; RV32-NEXT:    sb a1, 0(a0)
; RV32-NEXT:    sb a1, 16(a0)
; RV32-NEXT:    srli a5, a2, 24
; RV32-NEXT:    sb a5, 15(a0)
; RV32-NEXT:    srli a5, a2, 16
; RV32-NEXT:    sb a5, 14(a0)
; RV32-NEXT:    srli a2, a2, 8
; RV32-NEXT:    sb a2, 13(a0)
; RV32-NEXT:    srli a2, a3, 24
; RV32-NEXT:    sb a2, 11(a0)
; RV32-NEXT:    srli a2, a3, 16
; RV32-NEXT:    sb a2, 10(a0)
; RV32-NEXT:    srli a3, a3, 8
; RV32-NEXT:    sb a3, 9(a0)
; RV32-NEXT:    srli a2, a4, 24
; RV32-NEXT:    sb a2, 7(a0)
; RV32-NEXT:    srli a2, a4, 16
; RV32-NEXT:    sb a2, 6(a0)
; RV32-NEXT:    srli a4, a4, 8
; RV32-NEXT:    sb a4, 5(a0)
; RV32-NEXT:    srli a2, a1, 24
; RV32-NEXT:    sb a2, 3(a0)
; RV32-NEXT:    srli a2, a1, 16
; RV32-NEXT:    sb a2, 2(a0)
; RV32-NEXT:    srli a1, a1, 8
; RV32-NEXT:    sb a1, 1(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: memset_17:
; RV64:       # %bb.0:
; RV64-NEXT:    sb a2, 8(a0)
; RV64-NEXT:    sb a1, 0(a0)
; RV64-NEXT:    sb a1, 16(a0)
; RV64-NEXT:    srli a3, a2, 56
; RV64-NEXT:    sb a3, 15(a0)
; RV64-NEXT:    srli a3, a2, 48
; RV64-NEXT:    sb a3, 14(a0)
; RV64-NEXT:    srli a3, a2, 40
; RV64-NEXT:    sb a3, 13(a0)
; RV64-NEXT:    srli a3, a2, 32
; RV64-NEXT:    sb a3, 12(a0)
; RV64-NEXT:    srli a3, a2, 24
; RV64-NEXT:    sb a3, 11(a0)
; RV64-NEXT:    srli a3, a2, 16
; RV64-NEXT:    sb a3, 10(a0)
; RV64-NEXT:    srli a2, a2, 8
; RV64-NEXT:    sb a2, 9(a0)
; RV64-NEXT:    srli a2, a1, 56
; RV64-NEXT:    sb a2, 7(a0)
; RV64-NEXT:    srli a2, a1, 48
; RV64-NEXT:    sb a2, 6(a0)
; RV64-NEXT:    srli a2, a1, 40
; RV64-NEXT:    sb a2, 5(a0)
; RV64-NEXT:    srli a2, a1, 32
; RV64-NEXT:    sb a2, 4(a0)
; RV64-NEXT:    srli a2, a1, 24
; RV64-NEXT:    sb a2, 3(a0)
; RV64-NEXT:    srli a2, a1, 16
; RV64-NEXT:    sb a2, 2(a0)
; RV64-NEXT:    srli a1, a1, 8
; RV64-NEXT:    sb a1, 1(a0)
; RV64-NEXT:    ret
;
; RV32-FAST-LABEL: memset_17:
; RV32-FAST:       # %bb.0:
; RV32-FAST-NEXT:    lw a2, 12(a1)
; RV32-FAST-NEXT:    lw a3, 8(a1)
; RV32-FAST-NEXT:    lw a4, 4(a1)
; RV32-FAST-NEXT:    lw a1, 0(a1)
; RV32-FAST-NEXT:    sw a2, 12(a0)
; RV32-FAST-NEXT:    sw a3, 8(a0)
; RV32-FAST-NEXT:    sw a4, 4(a0)
; RV32-FAST-NEXT:    sw a1, 0(a0)
; RV32-FAST-NEXT:    sb a1, 16(a0)
; RV32-FAST-NEXT:    ret
;
; RV64-FAST-LABEL: memset_17:
; RV64-FAST:       # %bb.0:
; RV64-FAST-NEXT:    sd a2, 8(a0)
; RV64-FAST-NEXT:    sd a1, 0(a0)
; RV64-FAST-NEXT:    sb a1, 16(a0)
; RV64-FAST-NEXT:    ret
  tail call void @llvm.memset_pattern.p0.i64.i128(ptr %a, i128 %value, i64 17, i1 0)
  ret void
}

