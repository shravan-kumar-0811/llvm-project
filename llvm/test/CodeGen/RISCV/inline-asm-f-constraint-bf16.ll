; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+f,+experimental-zfbfmin -target-abi=ilp32 < %s \
; RUN:   | FileCheck -check-prefix=RV32F %s
; RUN: llc -mtriple=riscv64 -mattr=+f,+experimental-zfbfmin -target-abi=lp64 < %s \
; RUN:   | FileCheck -check-prefix=RV64F %s
; RUN: llc -mtriple=riscv32 -mattr=+d,+experimental-zfbfmin -target-abi=ilp32 < %s \
; RUN:   | FileCheck -check-prefix=RV32F %s
; RUN: llc -mtriple=riscv64 -mattr=+d,+experimental-zfbfmin -target-abi=lp64 < %s \
; RUN:   | FileCheck -check-prefix=RV64F %s

define float @constraint_f_bfloat(bfloat %a) nounwind {
; RV32F-LABEL: constraint_f_bfloat:
; RV32F:       # %bb.0:
; RV32F-NEXT:    fmv.h.x fa5, a0
; RV32F-NEXT:    #APP
; RV32F-NEXT:    fcvt.s.bf16 fa5, fa5
; RV32F-NEXT:    #NO_APP
; RV32F-NEXT:    fmv.x.w a0, fa5
; RV32F-NEXT:    ret
;
; RV64F-LABEL: constraint_f_bfloat:
; RV64F:       # %bb.0:
; RV64F-NEXT:    fmv.h.x fa5, a0
; RV64F-NEXT:    #APP
; RV64F-NEXT:    fcvt.s.bf16 fa5, fa5
; RV64F-NEXT:    #NO_APP
; RV64F-NEXT:    fmv.x.w a0, fa5
; RV64F-NEXT:    ret
  %2 = tail call float asm "fcvt.s.bf16 $0, $1", "=f,f"(bfloat %a)
  ret float %2
}

define bfloat @constraint_bfloat_f(float %x) {
; RV32F-LABEL: constraint_bfloat_f:
; RV32F:       # %bb.0:
; RV32F-NEXT:    .cfi_def_cfa_offset 0
; RV32F-NEXT:    fmv.w.x fa5, a0
; RV32F-NEXT:    #APP
; RV32F-NEXT:    fcvt.bf16.s fa5, fa5
; RV32F-NEXT:    #NO_APP
; RV32F-NEXT:    fmv.x.h a0, fa5
; RV32F-NEXT:    ret
;
; RV64F-LABEL: constraint_bfloat_f:
; RV64F:       # %bb.0:
; RV64F-NEXT:    .cfi_def_cfa_offset 0
; RV64F-NEXT:    fmv.w.x fa5, a0
; RV64F-NEXT:    #APP
; RV64F-NEXT:    fcvt.bf16.s fa5, fa5
; RV64F-NEXT:    #NO_APP
; RV64F-NEXT:    fmv.x.h a0, fa5
; RV64F-NEXT:    ret
  %1 = tail call bfloat asm sideeffect alignstack "fcvt.bf16.s $0, $1", "=f,f"(float %x)
  ret bfloat %1
}

define float @constraint_f_bfloat_abi_name(bfloat %a) nounwind {
; RV32F-LABEL: constraint_f_bfloat_abi_name:
; RV32F:       # %bb.0:
; RV32F-NEXT:    fmv.h.x fa0, a0
; RV32F-NEXT:    #APP
; RV32F-NEXT:    fcvt.s.bf16 ft0, fa0
; RV32F-NEXT:    #NO_APP
; RV32F-NEXT:    fmv.x.w a0, ft0
; RV32F-NEXT:    ret
;
; RV64F-LABEL: constraint_f_bfloat_abi_name:
; RV64F:       # %bb.0:
; RV64F-NEXT:    fmv.h.x fa0, a0
; RV64F-NEXT:    #APP
; RV64F-NEXT:    fcvt.s.bf16 ft0, fa0
; RV64F-NEXT:    #NO_APP
; RV64F-NEXT:    fmv.x.w a0, ft0
; RV64F-NEXT:    ret
  %2 = tail call float asm "fcvt.s.bf16 $0, $1", "={ft0},{fa0}"(bfloat %a)
  ret float %2
}

define bfloat @constraint_gpr(bfloat %x) {
; RV32F-LABEL: constraint_gpr:
; RV32F:       # %bb.0:
; RV32F-NEXT:    .cfi_def_cfa_offset 0
; RV32F-NEXT:    #APP
; RV32F-NEXT:    mv a0, a0
; RV32F-NEXT:    #NO_APP
; RV32F-NEXT:    ret
;
; RV64F-LABEL: constraint_gpr:
; RV64F:       # %bb.0:
; RV64F-NEXT:    .cfi_def_cfa_offset 0
; RV64F-NEXT:    #APP
; RV64F-NEXT:    mv a0, a0
; RV64F-NEXT:    #NO_APP
; RV64F-NEXT:    ret
  %1 = tail call bfloat asm sideeffect alignstack "mv $0, $1", "={x10},{x10}"(bfloat %x)
  ret bfloat %1
}
