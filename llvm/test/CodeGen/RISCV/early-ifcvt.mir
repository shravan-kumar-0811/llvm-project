# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=riscv64 -mcpu=veyron-v1 -riscv-disable-early-ifcvt=false -riscv-force-early-ifcvt=true -stress-early-ifcvt=true \
# RUN: -run-pass=early-ifcvt -simplify-mir  -o - %s | FileCheck %s

---
name:            ifcvt_lt
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: ifcvt_lt
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %base_addr:gpr = COPY $x10
  ; CHECK-NEXT:   %n:gpr = COPY $x11
  ; CHECK-NEXT:   %i_0:gpr = COPY $x0
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   %offset:gpr = PHI %i_inc, %bb.1, %i_0, %bb.0
  ; CHECK-NEXT:   %addr:gpr = ADD %base_addr, %offset
  ; CHECK-NEXT:   %x:gpr = LW %addr, 0
  ; CHECK-NEXT:   %const_5:gpr = ADDI $x0, 5
  ; CHECK-NEXT:   %const_t:gpr = ADDI $x0, 1
  ; CHECK-NEXT:   %const_f:gpr = ADDI $x0, 2
  ; CHECK-NEXT:   [[SLT:%[0-9]+]]:gpr = SLT %x, %const_5
  ; CHECK-NEXT:   [[VT_MASKC:%[0-9]+]]:gpr = VT_MASKC %const_t, [[SLT]]
  ; CHECK-NEXT:   [[VT_MASKCN:%[0-9]+]]:gpr = VT_MASKCN %const_f, [[SLT]]
  ; CHECK-NEXT:   %val:gpr = OR [[VT_MASKC]], [[VT_MASKCN]]
  ; CHECK-NEXT:   SW %val, %addr, 0
  ; CHECK-NEXT:   %i_inc:gpr = ADDI %offset, 4
  ; CHECK-NEXT:   BLT %i_inc, %n, %bb.1
  ; CHECK-NEXT:   PseudoBR %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   PseudoRET
  bb.0:
    successors: %bb.1
    liveins: $x10, $x11

    %base_addr:gpr = COPY $x10
    %n:gpr = COPY $x11
    %i_0:gpr = COPY $x0
    PseudoBR %bb.1

  bb.1:
    %offset:gpr = PHI %i_inc, %bb.4, %i_0, %bb.0
    %addr:gpr = ADD %base_addr, %offset
    %x:gpr = LW %addr, 0
    %const_5:gpr = ADDI $x0, 5
    BLT %x, %const_5, %bb.2
    PseudoBR %bb.3

  bb.2:
    %const_t:gpr = ADDI $x0, 1
    PseudoBR %bb.4

  bb.3:
    %const_f:gpr = ADDI $x0, 2
    PseudoBR %bb.4

  bb.4:
    %val:gpr = PHI %const_t, %bb.2, %const_f, %bb.3
    SW %val, %addr, 0
    %i_inc:gpr = ADDI %offset, 4
    BLT %i_inc, %n, %bb.1
    PseudoBR %bb.5

  bb.5:
    PseudoRET
...

---
name:            ifcvt_ltu
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: ifcvt_ltu
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %base_addr:gpr = COPY $x10
  ; CHECK-NEXT:   %n:gpr = COPY $x11
  ; CHECK-NEXT:   %i_0:gpr = COPY $x0
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   %offset:gpr = PHI %i_inc, %bb.1, %i_0, %bb.0
  ; CHECK-NEXT:   %addr:gpr = ADD %base_addr, %offset
  ; CHECK-NEXT:   %x:gpr = LW %addr, 0
  ; CHECK-NEXT:   %const_5:gpr = ADDI $x0, 5
  ; CHECK-NEXT:   %const_t:gpr = ADDI $x0, 1
  ; CHECK-NEXT:   %const_f:gpr = ADDI $x0, 2
  ; CHECK-NEXT:   [[SLTU:%[0-9]+]]:gpr = SLTU %x, %const_5
  ; CHECK-NEXT:   [[VT_MASKC:%[0-9]+]]:gpr = VT_MASKC %const_t, [[SLTU]]
  ; CHECK-NEXT:   [[VT_MASKCN:%[0-9]+]]:gpr = VT_MASKCN %const_f, [[SLTU]]
  ; CHECK-NEXT:   %val:gpr = OR [[VT_MASKC]], [[VT_MASKCN]]
  ; CHECK-NEXT:   SW %val, %addr, 0
  ; CHECK-NEXT:   %i_inc:gpr = ADDI %offset, 4
  ; CHECK-NEXT:   BLT %i_inc, %n, %bb.1
  ; CHECK-NEXT:   PseudoBR %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   PseudoRET
  bb.0:
    successors: %bb.1
    liveins: $x10, $x11

    %base_addr:gpr = COPY $x10
    %n:gpr = COPY $x11
    %i_0:gpr = COPY $x0
    PseudoBR %bb.1

  bb.1:
    %offset:gpr = PHI %i_inc, %bb.4, %i_0, %bb.0
    %addr:gpr = ADD %base_addr, %offset
    %x:gpr = LW %addr, 0
    %const_5:gpr = ADDI $x0, 5
    BLTU %x, %const_5, %bb.2
    PseudoBR %bb.3

  bb.2:
    %const_t:gpr = ADDI $x0, 1
    PseudoBR %bb.4

  bb.3:
    %const_f:gpr = ADDI $x0, 2
    PseudoBR %bb.4

  bb.4:
    %val:gpr = PHI %const_t, %bb.2, %const_f, %bb.3
    SW %val, %addr, 0
    %i_inc:gpr = ADDI %offset, 4
    BLT %i_inc, %n, %bb.1
    PseudoBR %bb.5

  bb.5:
    PseudoRET
...

---
name:            ifcvt_ge
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: ifcvt_ge
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %base_addr:gpr = COPY $x10
  ; CHECK-NEXT:   %n:gpr = COPY $x11
  ; CHECK-NEXT:   %i_0:gpr = COPY $x0
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   %offset:gpr = PHI %i_inc, %bb.1, %i_0, %bb.0
  ; CHECK-NEXT:   %addr:gpr = ADD %base_addr, %offset
  ; CHECK-NEXT:   %x:gpr = LW %addr, 0
  ; CHECK-NEXT:   %const_5:gpr = ADDI $x0, 5
  ; CHECK-NEXT:   %const_t:gpr = ADDI $x0, 1
  ; CHECK-NEXT:   %const_f:gpr = ADDI $x0, 2
  ; CHECK-NEXT:   [[SLT:%[0-9]+]]:gpr = SLT %x, %const_5
  ; CHECK-NEXT:   [[XORI:%[0-9]+]]:gpr = XORI [[SLT]], 1
  ; CHECK-NEXT:   [[VT_MASKC:%[0-9]+]]:gpr = VT_MASKC %const_f, [[XORI]]
  ; CHECK-NEXT:   [[VT_MASKCN:%[0-9]+]]:gpr = VT_MASKCN %const_t, [[XORI]]
  ; CHECK-NEXT:   %val:gpr = OR [[VT_MASKC]], [[VT_MASKCN]]
  ; CHECK-NEXT:   SW %val, %addr, 0
  ; CHECK-NEXT:   %i_inc:gpr = ADDI %offset, 4
  ; CHECK-NEXT:   BLT %i_inc, %n, %bb.1
  ; CHECK-NEXT:   PseudoBR %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   PseudoRET
  bb.0:
    successors: %bb.1
    liveins: $x10, $x11

    %base_addr:gpr = COPY $x10
    %n:gpr = COPY $x11
    %i_0:gpr = COPY $x0
    PseudoBR %bb.1

  bb.1:
    %offset:gpr = PHI %i_inc, %bb.4, %i_0, %bb.0
    %addr:gpr = ADD %base_addr, %offset
    %x:gpr = LW %addr, 0
    %const_5:gpr = ADDI $x0, 5
    BGE %x, %const_5, %bb.2
    PseudoBR %bb.3

  bb.2:
    %const_t:gpr = ADDI $x0, 1
    PseudoBR %bb.4

  bb.3:
    %const_f:gpr = ADDI $x0, 2
    PseudoBR %bb.4

  bb.4:
    %val:gpr = PHI %const_t, %bb.2, %const_f, %bb.3
    SW %val, %addr, 0
    %i_inc:gpr = ADDI %offset, 4
    BLT %i_inc, %n, %bb.1
    PseudoBR %bb.5

  bb.5:
    PseudoRET
...

---
name:            ifcvt_geu
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: ifcvt_geu
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %base_addr:gpr = COPY $x10
  ; CHECK-NEXT:   %n:gpr = COPY $x11
  ; CHECK-NEXT:   %i_0:gpr = COPY $x0
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   %offset:gpr = PHI %i_inc, %bb.1, %i_0, %bb.0
  ; CHECK-NEXT:   %addr:gpr = ADD %base_addr, %offset
  ; CHECK-NEXT:   %x:gpr = LW %addr, 0
  ; CHECK-NEXT:   %const_5:gpr = ADDI $x0, 5
  ; CHECK-NEXT:   %const_t:gpr = ADDI $x0, 1
  ; CHECK-NEXT:   %const_f:gpr = ADDI $x0, 2
  ; CHECK-NEXT:   [[SLTU:%[0-9]+]]:gpr = SLTU %x, %const_5
  ; CHECK-NEXT:   [[XORI:%[0-9]+]]:gpr = XORI [[SLTU]], 1
  ; CHECK-NEXT:   [[VT_MASKC:%[0-9]+]]:gpr = VT_MASKC %const_f, [[XORI]]
  ; CHECK-NEXT:   [[VT_MASKCN:%[0-9]+]]:gpr = VT_MASKCN %const_t, [[XORI]]
  ; CHECK-NEXT:   %val:gpr = OR [[VT_MASKC]], [[VT_MASKCN]]
  ; CHECK-NEXT:   SW %val, %addr, 0
  ; CHECK-NEXT:   %i_inc:gpr = ADDI %offset, 4
  ; CHECK-NEXT:   BLT %i_inc, %n, %bb.1
  ; CHECK-NEXT:   PseudoBR %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   PseudoRET
  bb.0:
    successors: %bb.1
    liveins: $x10, $x11

    %base_addr:gpr = COPY $x10
    %n:gpr = COPY $x11
    %i_0:gpr = COPY $x0
    PseudoBR %bb.1

  bb.1:
    %offset:gpr = PHI %i_inc, %bb.4, %i_0, %bb.0
    %addr:gpr = ADD %base_addr, %offset
    %x:gpr = LW %addr, 0
    %const_5:gpr = ADDI $x0, 5
    BGEU %x, %const_5, %bb.2
    PseudoBR %bb.3

  bb.2:
    %const_t:gpr = ADDI $x0, 1
    PseudoBR %bb.4

  bb.3:
    %const_f:gpr = ADDI $x0, 2
    PseudoBR %bb.4

  bb.4:
    %val:gpr = PHI %const_t, %bb.2, %const_f, %bb.3
    SW %val, %addr, 0
    %i_inc:gpr = ADDI %offset, 4
    BLT %i_inc, %n, %bb.1
    PseudoBR %bb.5

  bb.5:
    PseudoRET
...

---
name:            ifcvt_eq
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: ifcvt_eq
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %base_addr:gpr = COPY $x10
  ; CHECK-NEXT:   %n:gpr = COPY $x11
  ; CHECK-NEXT:   %i_0:gpr = COPY $x0
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   %offset:gpr = PHI %i_inc, %bb.1, %i_0, %bb.0
  ; CHECK-NEXT:   %addr:gpr = ADD %base_addr, %offset
  ; CHECK-NEXT:   %x:gpr = LW %addr, 0
  ; CHECK-NEXT:   %const_5:gpr = ADDI $x0, 5
  ; CHECK-NEXT:   %const_t:gpr = ADDI $x0, 1
  ; CHECK-NEXT:   %const_f:gpr = ADDI $x0, 2
  ; CHECK-NEXT:   [[XOR:%[0-9]+]]:gpr = XOR %x, %const_5
  ; CHECK-NEXT:   [[SLTIU:%[0-9]+]]:gpr = SLTIU [[XOR]], 1
  ; CHECK-NEXT:   [[VT_MASKC:%[0-9]+]]:gpr = VT_MASKC %const_t, [[SLTIU]]
  ; CHECK-NEXT:   [[VT_MASKCN:%[0-9]+]]:gpr = VT_MASKCN %const_f, [[SLTIU]]
  ; CHECK-NEXT:   %val:gpr = OR [[VT_MASKC]], [[VT_MASKCN]]
  ; CHECK-NEXT:   SW %val, %addr, 0
  ; CHECK-NEXT:   %i_inc:gpr = ADDI %offset, 4
  ; CHECK-NEXT:   BLT %i_inc, %n, %bb.1
  ; CHECK-NEXT:   PseudoBR %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   PseudoRET
  bb.0:
    successors: %bb.1
    liveins: $x10, $x11

    %base_addr:gpr = COPY $x10
    %n:gpr = COPY $x11
    %i_0:gpr = COPY $x0
    PseudoBR %bb.1

  bb.1:
    %offset:gpr = PHI %i_inc, %bb.4, %i_0, %bb.0
    %addr:gpr = ADD %base_addr, %offset
    %x:gpr = LW %addr, 0
    %const_5:gpr = ADDI $x0, 5
    BEQ %x, %const_5, %bb.2
    PseudoBR %bb.3

  bb.2:
    %const_t:gpr = ADDI $x0, 1
    PseudoBR %bb.4

  bb.3:
    %const_f:gpr = ADDI $x0, 2
    PseudoBR %bb.4

  bb.4:
    %val:gpr = PHI %const_t, %bb.2, %const_f, %bb.3
    SW %val, %addr, 0
    %i_inc:gpr = ADDI %offset, 4
    BLT %i_inc, %n, %bb.1
    PseudoBR %bb.5

  bb.5:
    PseudoRET
...

---
name:            ifcvt_ne
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: ifcvt_ne
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %base_addr:gpr = COPY $x10
  ; CHECK-NEXT:   %n:gpr = COPY $x11
  ; CHECK-NEXT:   %i_0:gpr = COPY $x0
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   %offset:gpr = PHI %i_inc, %bb.1, %i_0, %bb.0
  ; CHECK-NEXT:   %addr:gpr = ADD %base_addr, %offset
  ; CHECK-NEXT:   %x:gpr = LW %addr, 0
  ; CHECK-NEXT:   %const_5:gpr = ADDI $x0, 5
  ; CHECK-NEXT:   %const_t:gpr = ADDI $x0, 1
  ; CHECK-NEXT:   %const_f:gpr = ADDI $x0, 2
  ; CHECK-NEXT:   [[XOR:%[0-9]+]]:gpr = XOR %x, %const_5
  ; CHECK-NEXT:   [[SLTU:%[0-9]+]]:gpr = SLTU $x0, [[XOR]]
  ; CHECK-NEXT:   [[VT_MASKC:%[0-9]+]]:gpr = VT_MASKC %const_t, [[SLTU]]
  ; CHECK-NEXT:   [[VT_MASKCN:%[0-9]+]]:gpr = VT_MASKCN %const_f, [[SLTU]]
  ; CHECK-NEXT:   %val:gpr = OR [[VT_MASKC]], [[VT_MASKCN]]
  ; CHECK-NEXT:   SW %val, %addr, 0
  ; CHECK-NEXT:   %i_inc:gpr = ADDI %offset, 4
  ; CHECK-NEXT:   BLT %i_inc, %n, %bb.1
  ; CHECK-NEXT:   PseudoBR %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   PseudoRET
  bb.0:
    successors: %bb.1
    liveins: $x10, $x11

    %base_addr:gpr = COPY $x10
    %n:gpr = COPY $x11
    %i_0:gpr = COPY $x0
    PseudoBR %bb.1

  bb.1:
    %offset:gpr = PHI %i_inc, %bb.4, %i_0, %bb.0
    %addr:gpr = ADD %base_addr, %offset
    %x:gpr = LW %addr, 0
    %const_5:gpr = ADDI $x0, 5
    BNE %x, %const_5, %bb.2
    PseudoBR %bb.3

  bb.2:
    %const_t:gpr = ADDI $x0, 1
    PseudoBR %bb.4

  bb.3:
    %const_f:gpr = ADDI $x0, 2
    PseudoBR %bb.4

  bb.4:
    %val:gpr = PHI %const_t, %bb.2, %const_f, %bb.3
    SW %val, %addr, 0
    %i_inc:gpr = ADDI %offset, 4
    BLT %i_inc, %n, %bb.1
    PseudoBR %bb.5

  bb.5:
    PseudoRET
...

---
name:            ifcvt_eqz
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: ifcvt_eqz
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %base_addr:gpr = COPY $x10
  ; CHECK-NEXT:   %n:gpr = COPY $x11
  ; CHECK-NEXT:   %i_0:gpr = COPY $x0
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   %offset:gpr = PHI %i_inc, %bb.1, %i_0, %bb.0
  ; CHECK-NEXT:   %addr:gpr = ADD %base_addr, %offset
  ; CHECK-NEXT:   %x:gpr = LW %addr, 0
  ; CHECK-NEXT:   %const_t:gpr = ADDI $x0, 1
  ; CHECK-NEXT:   %const_f:gpr = ADDI $x0, 2
  ; CHECK-NEXT:   [[SLTIU:%[0-9]+]]:gpr = SLTIU %x, 1
  ; CHECK-NEXT:   [[VT_MASKC:%[0-9]+]]:gpr = VT_MASKC %const_t, [[SLTIU]]
  ; CHECK-NEXT:   [[VT_MASKCN:%[0-9]+]]:gpr = VT_MASKCN %const_f, [[SLTIU]]
  ; CHECK-NEXT:   %val:gpr = OR [[VT_MASKC]], [[VT_MASKCN]]
  ; CHECK-NEXT:   SW %val, %addr, 0
  ; CHECK-NEXT:   %i_inc:gpr = ADDI %offset, 4
  ; CHECK-NEXT:   BLT %i_inc, %n, %bb.1
  ; CHECK-NEXT:   PseudoBR %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   PseudoRET
  bb.0:
    successors: %bb.1
    liveins: $x10, $x11

    %base_addr:gpr = COPY $x10
    %n:gpr = COPY $x11
    %i_0:gpr = COPY $x0
    PseudoBR %bb.1

  bb.1:
    %offset:gpr = PHI %i_inc, %bb.4, %i_0, %bb.0
    %addr:gpr = ADD %base_addr, %offset
    %x:gpr = LW %addr, 0
    BEQ %x, $x0, %bb.2
    PseudoBR %bb.3

  bb.2:
    %const_t:gpr = ADDI $x0, 1
    PseudoBR %bb.4

  bb.3:
    %const_f:gpr = ADDI $x0, 2
    PseudoBR %bb.4

  bb.4:
    %val:gpr = PHI %const_t, %bb.2, %const_f, %bb.3
    SW %val, %addr, 0
    %i_inc:gpr = ADDI %offset, 4
    BLT %i_inc, %n, %bb.1
    PseudoBR %bb.5

  bb.5:
    PseudoRET
...

---
name:            ifcvt_lt_needs_rc_copies
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: ifcvt_lt_needs_rc_copies
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   %base_addr:gpr = COPY $x10
  ; CHECK-NEXT:   %n:gpr = COPY $x11
  ; CHECK-NEXT:   %i_0:gpr = COPY $x0
  ; CHECK-NEXT:   PseudoBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   %offset:gpr = PHI %i_inc, %bb.1, %i_0, %bb.0
  ; CHECK-NEXT:   %addr:gpr = ADD %base_addr, %offset
  ; CHECK-NEXT:   %x:gpr = LW %addr, 0
  ; CHECK-NEXT:   %const_1:gpr = ADDI $x0, 1
  ; CHECK-NEXT:   %const_t:fpr64 = nofpexcept FCVT_D_W %const_1, 0
  ; CHECK-NEXT:   %const_2:gpr = ADDI $x0, 2
  ; CHECK-NEXT:   %const_f:fpr64 = nofpexcept FCVT_D_W %const_2, 0
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY %const_t
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY %const_f
  ; CHECK-NEXT:   [[SLT:%[0-9]+]]:gpr = SLT %x, $x0
  ; CHECK-NEXT:   [[VT_MASKC:%[0-9]+]]:gpr = VT_MASKC [[COPY]], [[SLT]]
  ; CHECK-NEXT:   [[VT_MASKCN:%[0-9]+]]:gpr = VT_MASKCN [[COPY1]], [[SLT]]
  ; CHECK-NEXT:   [[OR:%[0-9]+]]:gpr = OR [[VT_MASKC]], [[VT_MASKCN]]
  ; CHECK-NEXT:   %val_fp:fpr64 = COPY [[OR]]
  ; CHECK-NEXT:   %val:gpr = nofpexcept FCVT_W_D %val_fp, 1
  ; CHECK-NEXT:   SW %val, %addr, 0
  ; CHECK-NEXT:   %i_inc:gpr = ADDI %offset, 4
  ; CHECK-NEXT:   BLT %i_inc, %n, %bb.1
  ; CHECK-NEXT:   PseudoBR %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   PseudoRET
  bb.0:
    successors: %bb.1
    liveins: $x10, $x11

    %base_addr:gpr = COPY $x10
    %n:gpr = COPY $x11
    %i_0:gpr = COPY $x0
    PseudoBR %bb.1

  bb.1:
    %offset:gpr = PHI %i_inc, %bb.4, %i_0, %bb.0
    %addr:gpr = ADD %base_addr, %offset
    %x:gpr = LW %addr, 0
    BLT %x, $x0, %bb.2
    PseudoBR %bb.3

  bb.2:
    %const_1:gpr = ADDI $x0, 1
    %const_t:fpr64 = nofpexcept FCVT_D_W %const_1, 0
    PseudoBR %bb.4

  bb.3:
    %const_2:gpr = ADDI $x0, 2
    %const_f:fpr64 = nofpexcept FCVT_D_W %const_2, 0
    PseudoBR %bb.4

  bb.4:
    %val_fp:fpr64 = PHI %const_t, %bb.2, %const_f, %bb.3
    %val:gpr = nofpexcept FCVT_W_D %val_fp, 1
    SW %val, %addr, 0
    %i_inc:gpr = ADDI %offset, 4
    BLT %i_inc, %n, %bb.1
    PseudoBR %bb.5

  bb.5:
    PseudoRET
...
