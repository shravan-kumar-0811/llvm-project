# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -o - -mtriple=aarch64-unknown-unknown -run-pass=aarch64-prelegalizer-combiner -verify-machineinstrs  %s | FileCheck %s --check-prefixes=CHECK,CHECK-PRE
# RUN: llc -o - -mtriple=aarch64-unknown-unknown -run-pass=aarch64-postlegalizer-combiner -verify-machineinstrs  %s | FileCheck %s --check-prefixes=CHECK,CHECK-POST

---
name:            test_combine_trunc_select
legalized: true
body:             |
  bb.1:
    ; CHECK-PRE-LABEL: name: test_combine_trunc_select
    ; CHECK-PRE: %cond:_(s32) = COPY $w0
    ; CHECK-PRE-NEXT: %lhs:_(s64) = COPY $x0
    ; CHECK-PRE-NEXT: %rhs:_(s64) = COPY $x0
    ; CHECK-PRE-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC %lhs(s64)
    ; CHECK-PRE-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC %rhs(s64)
    ; CHECK-PRE-NEXT: %small:_(s32) = G_SELECT %cond(s32), [[TRUNC]], [[TRUNC1]]
    ; CHECK-PRE-NEXT: $w0 = COPY %small(s32)
    ;
    ; CHECK-POST-LABEL: name: test_combine_trunc_select
    ; CHECK-POST: %cond:_(s32) = COPY $w0
    ; CHECK-POST-NEXT: %lhs:_(s64) = COPY $x0
    ; CHECK-POST-NEXT: %rhs:_(s64) = COPY $x0
    ; CHECK-POST-NEXT: %res:_(s64) = G_SELECT %cond(s32), %lhs, %rhs
    ; CHECK-POST-NEXT: %small:_(s32) = G_TRUNC %res(s64)
    ; CHECK-POST-NEXT: $w0 = COPY %small(s32)
    %cond:_(s32) = COPY $w0
    %lhs:_(s64) = COPY $x0
    %rhs:_(s64) = COPY $x0
    %res:_(s64) = G_SELECT %cond(s32), %lhs, %rhs
    %small:_(s32) = G_TRUNC %res(s64)
    $w0 = COPY %small(s32)
...
---
name:            test_combine_zext_select
legalized: true
body:             |
  bb.1:
    ; CHECK-PRE-LABEL: name: test_combine_zext_select
    ; CHECK-PRE: %cond:_(s32) = COPY $w0
    ; CHECK-PRE-NEXT: %lhs:_(s32) = COPY $w0
    ; CHECK-PRE-NEXT: %rhs:_(s32) = COPY $w0
    ; CHECK-PRE-NEXT: [[ZEXT:%[0-9]+]]:_(s64) = G_ZEXT %lhs(s32)
    ; CHECK-PRE-NEXT: [[ZEXT1:%[0-9]+]]:_(s64) = G_ZEXT %rhs(s32)
    ; CHECK-PRE-NEXT: %big:_(s64) = G_SELECT %cond(s32), [[ZEXT]], [[ZEXT1]]
    ; CHECK-PRE-NEXT: $x0 = COPY %big(s64)
    ;
    ; CHECK-POST-LABEL: name: test_combine_zext_select
    ; CHECK-POST: %cond:_(s32) = COPY $w0
    ; CHECK-POST-NEXT: %lhs:_(s32) = COPY $w0
    ; CHECK-POST-NEXT: %rhs:_(s32) = COPY $w0
    ; CHECK-POST-NEXT: %res:_(s32) = G_SELECT %cond(s32), %lhs, %rhs
    ; CHECK-POST-NEXT: %big:_(s64) = G_ZEXT %res(s32)
    ; CHECK-POST-NEXT: $x0 = COPY %big(s64)
    %cond:_(s32) = COPY $w0
    %lhs:_(s32) = COPY $w0
    %rhs:_(s32) = COPY $w0
    %res:_(s32) = G_SELECT %cond(s32), %lhs, %rhs
    %big:_(s64) = G_ZEXT %res(s32)
    $x0 = COPY %big(s64)
...
---
name:            test_combine_anyzext_select
legalized: true
body:             |
  bb.1:
    ; CHECK-PRE-LABEL: name: test_combine_anyzext_select
    ; CHECK-PRE: %cond:_(s32) = COPY $w0
    ; CHECK-PRE-NEXT: %lhs:_(s32) = COPY $w0
    ; CHECK-PRE-NEXT: %rhs:_(s32) = COPY $w0
    ; CHECK-PRE-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT %lhs(s32)
    ; CHECK-PRE-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT %rhs(s32)
    ; CHECK-PRE-NEXT: %big:_(s64) = G_SELECT %cond(s32), [[ANYEXT]], [[ANYEXT1]]
    ; CHECK-PRE-NEXT: $x0 = COPY %big(s64)
    ;
    ; CHECK-POST-LABEL: name: test_combine_anyzext_select
    ; CHECK-POST: %cond:_(s32) = COPY $w0
    ; CHECK-POST-NEXT: %lhs:_(s32) = COPY $w0
    ; CHECK-POST-NEXT: %rhs:_(s32) = COPY $w0
    ; CHECK-POST-NEXT: %res:_(s32) = G_SELECT %cond(s32), %lhs, %rhs
    ; CHECK-POST-NEXT: %big:_(s64) = G_ANYEXT %res(s32)
    ; CHECK-POST-NEXT: $x0 = COPY %big(s64)
    %cond:_(s32) = COPY $w0
    %lhs:_(s32) = COPY $w0
    %rhs:_(s32) = COPY $w0
    %res:_(s32) = G_SELECT %cond(s32), %lhs, %rhs
    %big:_(s64) = G_ANYEXT %res(s32)
    $x0 = COPY %big(s64)
...
---
name:            test_combine_anyzext_select_multi_use
legalized: true
body:             |
  bb.1:
    ; CHECK-LABEL: name: test_combine_anyzext_select_multi_use
    ; CHECK: %cond:_(s32) = COPY $w0
    ; CHECK-NEXT: %lhs:_(s32) = COPY $w0
    ; CHECK-NEXT: %rhs:_(s32) = COPY $w0
    ; CHECK-NEXT: %res:_(s32) = G_SELECT %cond(s32), %lhs, %rhs
    ; CHECK-NEXT: %big:_(s64) = G_ANYEXT %res(s32)
    ; CHECK-NEXT: $x0 = COPY %big(s64)
    ; CHECK-NEXT: $w0 = COPY %res(s32)
    %cond:_(s32) = COPY $w0
    %lhs:_(s32) = COPY $w0
    %rhs:_(s32) = COPY $w0
    %res:_(s32) = G_SELECT %cond(s32), %lhs, %rhs
    %big:_(s64) = G_ANYEXT %res(s32)
    $x0 = COPY %big(s64)
    $w0 = COPY %res(s32)
...
---
name:            test_combine_trunc_select_vector_out_of_budget
legalized: true
body:             |
  bb.1:
    ; CHECK-LABEL: name: test_combine_trunc_select_vector_out_of_budget
    ; CHECK: %cond:_(<2 x s32>) = COPY $x0
    ; CHECK-NEXT: %arg1:_(s64) = COPY $x0
    ; CHECK-NEXT: %arg2:_(s64) = COPY $x0
    ; CHECK-NEXT: %bv:_(<2 x s64>) = G_BUILD_VECTOR %arg1(s64), %arg2(s64)
    ; CHECK-NEXT: %bv2:_(<2 x s64>) = G_BUILD_VECTOR %arg2(s64), %arg1(s64)
    ; CHECK-NEXT: %res:_(<2 x s64>) = G_SELECT %cond(<2 x s32>), %bv, %bv2
    ; CHECK-NEXT: %small:_(<2 x s32>) = G_TRUNC %res(<2 x s64>)
    ; CHECK-NEXT: $x0 = COPY %small(<2 x s32>)
    %cond:_(<2 x s32>) = COPY $x0
    %arg1:_(s64) = COPY $x0
    %arg2:_(s64) = COPY $x0
    %bv:_(<2 x s64>) = G_BUILD_VECTOR %arg1(s64), %arg2(s64)
    %bv2:_(<2 x s64>) = G_BUILD_VECTOR %arg2(s64), %arg1(s64)
    %res:_(<2 x s64>) = G_SELECT %cond(<2 x s32>), %bv, %bv2
    %small:_(<2 x s32>) = G_TRUNC %res(<2 x s64>)
    $x0 = COPY %small(<2 x s32>)

...
---
name:            zext_const
legalized: true
body:             |
  bb.0:
    liveins: $w0, $w1
    ; CHECK-PRE-LABEL: name: zext_const
    ; CHECK-PRE: liveins: $w0, $w1
    ; CHECK-PRE-NEXT: {{  $}}
    ; CHECK-PRE-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 5
    ; CHECK-PRE-NEXT: $x0 = COPY [[C]](s64)
    ;
    ; CHECK-POST-LABEL: name: zext_const
    ; CHECK-POST: liveins: $w0, $w1
    ; CHECK-POST-NEXT: {{  $}}
    ; CHECK-POST-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK-POST-NEXT: [[ZEXT:%[0-9]+]]:_(s64) = G_ZEXT [[C]](s32)
    ; CHECK-POST-NEXT: $x0 = COPY [[ZEXT]](s64)
    %2:_(s32) = G_CONSTANT i32 5
    %3:_(s64) = G_ZEXT %2
    $x0 = COPY %3
...
---
name:            sext_const
legalized: true
body:             |
  bb.0:
    liveins: $q0, $q1
    ; CHECK-PRE-LABEL: name: sext_const
    ; CHECK-PRE: liveins: $q0, $q1
    ; CHECK-PRE-NEXT: {{  $}}
    ; CHECK-PRE-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -5
    ; CHECK-PRE-NEXT: $x0 = COPY [[C]](s64)
    ;
    ; CHECK-POST-LABEL: name: sext_const
    ; CHECK-POST: liveins: $q0, $q1
    ; CHECK-POST-NEXT: {{  $}}
    ; CHECK-POST-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -5
    ; CHECK-POST-NEXT: [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[C]](s32)
    ; CHECK-POST-NEXT: $x0 = COPY [[SEXT]](s64)
    %2:_(s32) = G_CONSTANT i32 -5
    %3:_(s64) = G_SEXT %2
    $x0 = COPY %3
...
---
name:            trunc_const
legalized: true
body:             |
  bb.0:
    liveins: $q0, $q1
    ; CHECK-PRE-LABEL: name: trunc_const
    ; CHECK-PRE: liveins: $q0, $q1
    ; CHECK-PRE-NEXT: {{  $}}
    ; CHECK-PRE-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 705032704
    ; CHECK-PRE-NEXT: $w0 = COPY [[C]](s32)
    ;
    ; CHECK-POST-LABEL: name: trunc_const
    ; CHECK-POST: liveins: $q0, $q1
    ; CHECK-POST-NEXT: {{  $}}
    ; CHECK-POST-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 5000000000
    ; CHECK-POST-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[C]](s64)
    ; CHECK-POST-NEXT: $w0 = COPY [[TRUNC]](s32)
    %2:_(s64) = G_CONSTANT i64 5000000000
    %3:_(s32) = G_TRUNC %2
    $w0 = COPY %3
...
---
name:            trunc_const_bv
legalized: true
body:             |
  bb.0:
    liveins: $q0, $q1
    ; CHECK-LABEL: name: trunc_const_bv
    ; CHECK: liveins: $q0, $q1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 5000000000
    ; CHECK-NEXT: %bv:_(<2 x s64>) = G_BUILD_VECTOR [[C]](s64), [[C]](s64)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(<2 x s32>) = G_TRUNC %bv(<2 x s64>)
    ; CHECK-NEXT: $x0 = COPY [[TRUNC]](<2 x s32>)
    %2:_(s64) = G_CONSTANT i64 5000000000
    %bv:_(<2 x s64>) = G_BUILD_VECTOR %2, %2
    %3:_(<2 x s32>) = G_TRUNC %bv
    $x0 = COPY %3
...
---
name:            anyext_const
legalized: true
body:             |
  bb.0:
    liveins: $q0, $q1
    ; CHECK-PRE-LABEL: name: anyext_const
    ; CHECK-PRE: liveins: $q0, $q1
    ; CHECK-PRE-NEXT: {{  $}}
    ; CHECK-PRE-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 500
    ; CHECK-PRE-NEXT: $x0 = COPY [[C]](s64)
    ;
    ; CHECK-POST-LABEL: name: anyext_const
    ; CHECK-POST: liveins: $q0, $q1
    ; CHECK-POST-NEXT: {{  $}}
    ; CHECK-POST-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 500
    ; CHECK-POST-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[C]](s32)
    ; CHECK-POST-NEXT: $x0 = COPY [[ANYEXT]](s64)
    %2:_(s32) = G_CONSTANT i32 500
    %3:_(s64) = G_ANYEXT %2
    $x0 = COPY %3
...
---
name:            mul_const
legalized: true
body:             |
  bb.0:
    liveins: $q0, $q1
    ; CHECK-PRE-LABEL: name: mul_const
    ; CHECK-PRE: liveins: $q0, $q1
    ; CHECK-PRE-NEXT: {{  $}}
    ; CHECK-PRE-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-PRE-NEXT: $x0 = COPY [[C]](s64)
    ;
    ; CHECK-POST-LABEL: name: mul_const
    ; CHECK-POST: liveins: $q0, $q1
    ; CHECK-POST-NEXT: {{  $}}
    ; CHECK-POST-NEXT: %x:_(s32) = COPY $w0
    ; CHECK-POST-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB %x, %x
    ; CHECK-POST-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32
    ; CHECK-POST-NEXT: %mul:_(s32) = G_SHL [[SUB]], [[C]](s64)
    ; CHECK-POST-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT %mul(s32)
    ; CHECK-POST-NEXT: $x0 = COPY [[ANYEXT]](s64)
    %x:_(s32) = COPY $w0
    %zero:_(s32) = G_CONSTANT i32 0
    %mul:_(s32) = G_MUL %x, %zero
    %3:_(s64) = G_ANYEXT %mul
    $x0 = COPY %3
