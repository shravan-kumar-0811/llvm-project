; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --version 5
; RUN: opt < %s -passes=asan -S -mtriple=amdgcn-amd-amdhsa | FileCheck %s

%llvm.amdgcn.sw.lds.k0.md.type = type { %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item }
%llvm.amdgcn.sw.lds.k0.md.item = type { i32, i32, i32 }

@llvm.amdgcn.sw.lds.k0 = internal addrspace(3) global ptr poison, no_sanitize_address, align 8, !absolute_symbol !0
@llvm.amdgcn.k0.dynlds = external addrspace(3) global [0 x i8], no_sanitize_address, align 8, !absolute_symbol !1
@llvm.amdgcn.sw.lds.k0.md = internal addrspace(1) global %llvm.amdgcn.sw.lds.k0.md.type { %llvm.amdgcn.sw.lds.k0.md.item { i32 0, i32 8, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 8, i32 1, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 16, i32 4, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 24, i32 0, i32 0 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 24, i32 0, i32 0 } }, no_sanitize_address
@llvm.amdgcn.sw.lds.base.table = internal addrspace(1) constant [1 x ptr addrspace(3)] [ptr addrspace(3) @llvm.amdgcn.sw.lds.k0], no_sanitize_address
@llvm.amdgcn.sw.lds.offset.table = internal addrspace(1) constant [1 x [2 x ptr addrspace(1)]] [[2 x ptr addrspace(1)] [ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 0)]], no_sanitize_address

; Function Attrs: sanitize_address
; CHECK: @llvm.amdgcn.sw.lds.k0 = internal addrspace(3) global ptr poison, no_sanitize_address, align 8, !absolute_symbol [[META0:![0-9]+]]
; CHECK: @llvm.amdgcn.k0.dynlds = external addrspace(3) global [0 x i8], no_sanitize_address, align 8, !absolute_symbol [[META1:![0-9]+]]
; CHECK: @llvm.amdgcn.sw.lds.k0.md = internal addrspace(1) global %llvm.amdgcn.sw.lds.k0.md.type { %llvm.amdgcn.sw.lds.k0.md.item { i32 0, i32 8, i32 32 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 32, i32 1, i32 32 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 64, i32 4, i32 32 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 96, i32 0, i32 0 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 96, i32 0, i32 0 } }, no_sanitize_address
; @llvm.amdgcn.sw.lds.base.table = internal addrspace(1) constant [1 x ptr addrspace(3)] [ptr addrspace(3) @llvm.amdgcn.sw.lds.k0], no_sanitize_address
; @llvm.amdgcn.sw.lds.offset.table = internal addrspace(1) constant [1 x [2 x ptr addrspace(1)]] [[2 x ptr addrspace(1)] [ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 0)]], no_sanitize_address
; CHECK: @llvm.used = appending addrspace(1) global [1 x ptr] [ptr @asan.module_ctor], section "llvm.metadata"
; CHECK: @___asan_globals_registered = common hidden addrspace(1) global i64 0
; CHECK: @__start_asan_globals = extern_weak hidden addrspace(1) global i64
; CHECK: @__stop_asan_globals = extern_weak hidden addrspace(1) global i64
; CHECK: @llvm.global_ctors = appending addrspace(1) global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_ctor, ptr @asan.module_ctor }]
;.
define void @use_variables() #0 {
; CHECK-LABEL: define void @use_variables(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.lds.kernel.id()
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr addrspace(3)], ptr addrspace(1) @llvm.amdgcn.sw.lds.base.table, i32 0, i32 [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = ptrtoint ptr addrspace(1) [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = lshr i64 [[TMP3]], 3
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], 2147450880
; CHECK-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ne i8 [[TMP7]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = and i64 [[TMP3]], 7
; CHECK-NEXT:    [[TMP10:%.*]] = add i64 [[TMP9]], 3
; CHECK-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP10]] to i8
; CHECK-NEXT:    [[TMP12:%.*]] = icmp sge i8 [[TMP11]], [[TMP7]]
; CHECK-NEXT:    [[TMP13:%.*]] = and i1 [[TMP8]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP13]])
; CHECK-NEXT:    [[TMP15:%.*]] = icmp ne i64 [[TMP14]], 0
; CHECK-NEXT:    br i1 [[TMP15]], label %[[ASAN_REPORT:.*]], label %[[BB18:.*]], !prof [[PROF2:![0-9]+]]
; CHECK:       [[ASAN_REPORT]]:
; CHECK-NEXT:    br i1 [[TMP13]], label %[[BB16:.*]], label %[[BB17:.*]]
; CHECK:       [[BB16]]:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP3]]) #[[ATTR8:[0-9]+]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB17]]
; CHECK:       [[BB17]]:
; CHECK-NEXT:    br label %[[BB18]]
; CHECK:       [[BB18]]:
; CHECK-NEXT:    [[TMP19:%.*]] = load ptr addrspace(3), ptr addrspace(1) [[TMP2]], align 4
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr inbounds [1 x [2 x ptr addrspace(1)]], ptr addrspace(1) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 [[TMP1]], i32 0
; CHECK-NEXT:    [[TMP21:%.*]] = ptrtoint ptr addrspace(1) [[TMP20]] to i64
; CHECK-NEXT:    [[TMP22:%.*]] = lshr i64 [[TMP21]], 3
; CHECK-NEXT:    [[TMP23:%.*]] = add i64 [[TMP22]], 2147450880
; CHECK-NEXT:    [[TMP24:%.*]] = inttoptr i64 [[TMP23]] to ptr
; CHECK-NEXT:    [[TMP25:%.*]] = load i8, ptr [[TMP24]], align 1
; CHECK-NEXT:    [[TMP26:%.*]] = icmp ne i8 [[TMP25]], 0
; CHECK-NEXT:    [[TMP27:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP26]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i64 [[TMP27]], 0
; CHECK-NEXT:    br i1 [[TMP28]], label %[[ASAN_REPORT1:.*]], label %[[BB31:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT1]]:
; CHECK-NEXT:    br i1 [[TMP26]], label %[[BB29:.*]], label %[[BB30:.*]]
; CHECK:       [[BB29]]:
; CHECK-NEXT:    call void @__asan_report_load8(i64 [[TMP21]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB30]]
; CHECK:       [[BB30]]:
; CHECK-NEXT:    br label %[[BB31]]
; CHECK:       [[BB31]]:
; CHECK-NEXT:    [[TMP32:%.*]] = load ptr addrspace(1), ptr addrspace(1) [[TMP20]], align 8
; CHECK-NEXT:    [[TMP33:%.*]] = ptrtoint ptr addrspace(1) [[TMP32]] to i64
; CHECK-NEXT:    [[TMP34:%.*]] = lshr i64 [[TMP33]], 3
; CHECK-NEXT:    [[TMP35:%.*]] = add i64 [[TMP34]], 2147450880
; CHECK-NEXT:    [[TMP36:%.*]] = inttoptr i64 [[TMP35]] to ptr
; CHECK-NEXT:    [[TMP37:%.*]] = load i8, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP38:%.*]] = icmp ne i8 [[TMP37]], 0
; CHECK-NEXT:    [[TMP39:%.*]] = and i64 [[TMP33]], 7
; CHECK-NEXT:    [[TMP40:%.*]] = add i64 [[TMP39]], 3
; CHECK-NEXT:    [[TMP41:%.*]] = trunc i64 [[TMP40]] to i8
; CHECK-NEXT:    [[TMP42:%.*]] = icmp sge i8 [[TMP41]], [[TMP37]]
; CHECK-NEXT:    [[TMP43:%.*]] = and i1 [[TMP38]], [[TMP42]]
; CHECK-NEXT:    [[TMP44:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP43]])
; CHECK-NEXT:    [[TMP45:%.*]] = icmp ne i64 [[TMP44]], 0
; CHECK-NEXT:    br i1 [[TMP45]], label %[[ASAN_REPORT2:.*]], label %[[BB48:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT2]]:
; CHECK-NEXT:    br i1 [[TMP43]], label %[[BB46:.*]], label %[[BB47:.*]]
; CHECK:       [[BB46]]:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP33]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB47]]
; CHECK:       [[BB47]]:
; CHECK-NEXT:    br label %[[BB48]]
; CHECK:       [[BB48]]:
; CHECK-NEXT:    [[TMP49:%.*]] = load i32, ptr addrspace(1) [[TMP32]], align 4
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr inbounds i8, ptr addrspace(3) [[TMP19]], i32 [[TMP49]]
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [1 x [2 x ptr addrspace(1)]], ptr addrspace(1) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 [[TMP1]], i32 1
; CHECK-NEXT:    [[TMP52:%.*]] = ptrtoint ptr addrspace(1) [[TMP51]] to i64
; CHECK-NEXT:    [[TMP53:%.*]] = lshr i64 [[TMP52]], 3
; CHECK-NEXT:    [[TMP54:%.*]] = add i64 [[TMP53]], 2147450880
; CHECK-NEXT:    [[TMP55:%.*]] = inttoptr i64 [[TMP54]] to ptr
; CHECK-NEXT:    [[TMP56:%.*]] = load i8, ptr [[TMP55]], align 1
; CHECK-NEXT:    [[TMP57:%.*]] = icmp ne i8 [[TMP56]], 0
; CHECK-NEXT:    [[TMP58:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP57]])
; CHECK-NEXT:    [[TMP59:%.*]] = icmp ne i64 [[TMP58]], 0
; CHECK-NEXT:    br i1 [[TMP59]], label %[[ASAN_REPORT3:.*]], label %[[BB62:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT3]]:
; CHECK-NEXT:    br i1 [[TMP57]], label %[[BB60:.*]], label %[[BB61:.*]]
; CHECK:       [[BB60]]:
; CHECK-NEXT:    call void @__asan_report_load8(i64 [[TMP52]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB61]]
; CHECK:       [[BB61]]:
; CHECK-NEXT:    br label %[[BB62]]
; CHECK:       [[BB62]]:
; CHECK-NEXT:    [[TMP63:%.*]] = load ptr addrspace(1), ptr addrspace(1) [[TMP51]], align 8
; CHECK-NEXT:    [[TMP64:%.*]] = ptrtoint ptr addrspace(1) [[TMP63]] to i64
; CHECK-NEXT:    [[TMP65:%.*]] = lshr i64 [[TMP64]], 3
; CHECK-NEXT:    [[TMP66:%.*]] = add i64 [[TMP65]], 2147450880
; CHECK-NEXT:    [[TMP67:%.*]] = inttoptr i64 [[TMP66]] to ptr
; CHECK-NEXT:    [[TMP68:%.*]] = load i8, ptr [[TMP67]], align 1
; CHECK-NEXT:    [[TMP69:%.*]] = icmp ne i8 [[TMP68]], 0
; CHECK-NEXT:    [[TMP70:%.*]] = and i64 [[TMP64]], 7
; CHECK-NEXT:    [[TMP71:%.*]] = add i64 [[TMP70]], 3
; CHECK-NEXT:    [[TMP72:%.*]] = trunc i64 [[TMP71]] to i8
; CHECK-NEXT:    [[TMP73:%.*]] = icmp sge i8 [[TMP72]], [[TMP68]]
; CHECK-NEXT:    [[TMP74:%.*]] = and i1 [[TMP69]], [[TMP73]]
; CHECK-NEXT:    [[TMP75:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP74]])
; CHECK-NEXT:    [[TMP76:%.*]] = icmp ne i64 [[TMP75]], 0
; CHECK-NEXT:    br i1 [[TMP76]], label %[[ASAN_REPORT4:.*]], label %[[BB79:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT4]]:
; CHECK-NEXT:    br i1 [[TMP74]], label %[[BB77:.*]], label %[[BB78:.*]]
; CHECK:       [[BB77]]:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP64]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB78]]
; CHECK:       [[BB78]]:
; CHECK-NEXT:    br label %[[BB79]]
; CHECK:       [[BB79]]:
; CHECK-NEXT:    [[TMP80:%.*]] = load i32, ptr addrspace(1) [[TMP63]], align 4
; CHECK-NEXT:    [[TMP81:%.*]] = getelementptr inbounds i8, ptr addrspace(3) [[TMP19]], i32 [[TMP80]]
; CHECK-NEXT:    [[TMP82:%.*]] = call i32 @llvm.amdgcn.lds.kernel.id()
; CHECK-NEXT:    [[TMP83:%.*]] = getelementptr inbounds [1 x ptr addrspace(3)], ptr addrspace(1) @llvm.amdgcn.sw.lds.base.table, i32 0, i32 [[TMP82]]
; CHECK-NEXT:    [[TMP84:%.*]] = load ptr addrspace(3), ptr addrspace(1) [[TMP83]], align 4
; CHECK-NEXT:    [[TMP85:%.*]] = ptrtoint ptr addrspace(3) [[TMP50]] to i32
; CHECK-NEXT:    [[TMP86:%.*]] = load ptr addrspace(1), ptr addrspace(3) [[TMP84]], align 8
; CHECK-NEXT:    [[TMP87:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP86]], i32 [[TMP85]]
; CHECK-NEXT:    [[TMP88:%.*]] = ptrtoint ptr addrspace(1) [[TMP87]] to i64
; CHECK-NEXT:    [[TMP89:%.*]] = lshr i64 [[TMP88]], 3
; CHECK-NEXT:    [[TMP90:%.*]] = add i64 [[TMP89]], 2147450880
; CHECK-NEXT:    [[TMP91:%.*]] = inttoptr i64 [[TMP90]] to ptr
; CHECK-NEXT:    [[TMP92:%.*]] = load i8, ptr [[TMP91]], align 1
; CHECK-NEXT:    [[TMP93:%.*]] = icmp ne i8 [[TMP92]], 0
; CHECK-NEXT:    [[TMP94:%.*]] = and i64 [[TMP88]], 7
; CHECK-NEXT:    [[TMP95:%.*]] = trunc i64 [[TMP94]] to i8
; CHECK-NEXT:    [[TMP96:%.*]] = icmp sge i8 [[TMP95]], [[TMP92]]
; CHECK-NEXT:    [[TMP97:%.*]] = and i1 [[TMP93]], [[TMP96]]
; CHECK-NEXT:    [[TMP98:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP97]])
; CHECK-NEXT:    [[TMP99:%.*]] = icmp ne i64 [[TMP98]], 0
; CHECK-NEXT:    br i1 [[TMP99]], label %[[ASAN_REPORT5:.*]], label %[[BB102:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT5]]:
; CHECK-NEXT:    br i1 [[TMP97]], label %[[BB100:.*]], label %[[BB101:.*]]
; CHECK:       [[BB100]]:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP88]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB101]]
; CHECK:       [[BB101]]:
; CHECK-NEXT:    br label %[[BB102]]
; CHECK:       [[BB102]]:
; CHECK-NEXT:    store i8 3, ptr addrspace(3) [[TMP50]], align 4
; CHECK-NEXT:    [[TMP103:%.*]] = call i32 @llvm.amdgcn.lds.kernel.id()
; CHECK-NEXT:    [[TMP104:%.*]] = getelementptr inbounds [1 x ptr addrspace(3)], ptr addrspace(1) @llvm.amdgcn.sw.lds.base.table, i32 0, i32 [[TMP103]]
; CHECK-NEXT:    [[TMP105:%.*]] = load ptr addrspace(3), ptr addrspace(1) [[TMP104]], align 4
; CHECK-NEXT:    [[TMP106:%.*]] = ptrtoint ptr addrspace(3) [[TMP81]] to i32
; CHECK-NEXT:    [[TMP107:%.*]] = load ptr addrspace(1), ptr addrspace(3) [[TMP105]], align 8
; CHECK-NEXT:    [[TMP108:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP107]], i32 [[TMP106]]
; CHECK-NEXT:    [[TMP109:%.*]] = ptrtoint ptr addrspace(1) [[TMP108]] to i64
; CHECK-NEXT:    [[TMP110:%.*]] = lshr i64 [[TMP109]], 3
; CHECK-NEXT:    [[TMP111:%.*]] = add i64 [[TMP110]], 2147450880
; CHECK-NEXT:    [[TMP112:%.*]] = inttoptr i64 [[TMP111]] to ptr
; CHECK-NEXT:    [[TMP113:%.*]] = load i8, ptr [[TMP112]], align 1
; CHECK-NEXT:    [[TMP114:%.*]] = icmp ne i8 [[TMP113]], 0
; CHECK-NEXT:    [[TMP115:%.*]] = and i64 [[TMP109]], 7
; CHECK-NEXT:    [[TMP116:%.*]] = trunc i64 [[TMP115]] to i8
; CHECK-NEXT:    [[TMP117:%.*]] = icmp sge i8 [[TMP116]], [[TMP113]]
; CHECK-NEXT:    [[TMP118:%.*]] = and i1 [[TMP114]], [[TMP117]]
; CHECK-NEXT:    [[TMP119:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP118]])
; CHECK-NEXT:    [[TMP120:%.*]] = icmp ne i64 [[TMP119]], 0
; CHECK-NEXT:    br i1 [[TMP120]], label %[[ASAN_REPORT6:.*]], label %[[BB123:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT6]]:
; CHECK-NEXT:    br i1 [[TMP118]], label %[[BB121:.*]], label %[[BB122:.*]]
; CHECK:       [[BB121]]:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP109]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB122]]
; CHECK:       [[BB122]]:
; CHECK-NEXT:    br label %[[BB123]]
; CHECK:       [[BB123]]:
; CHECK-NEXT:    store i8 3, ptr addrspace(3) [[TMP81]], align 8
; CHECK-NEXT:    ret void
;
  %1 = call i32 @llvm.amdgcn.lds.kernel.id()
  %2 = getelementptr inbounds [1 x ptr addrspace(3)], ptr addrspace(1) @llvm.amdgcn.sw.lds.base.table, i32 0, i32 %1
  %3 = load ptr addrspace(3), ptr addrspace(1) %2, align 4
  %4 = getelementptr inbounds [1 x [2 x ptr addrspace(1)]], ptr addrspace(1) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 %1, i32 0
  %5 = load ptr addrspace(1), ptr addrspace(1) %4, align 8
  %6 = load i32, ptr addrspace(1) %5, align 4
  %7 = getelementptr inbounds i8, ptr addrspace(3) %3, i32 %6
  %8 = getelementptr inbounds [1 x [2 x ptr addrspace(1)]], ptr addrspace(1) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 %1, i32 1
  %9 = load ptr addrspace(1), ptr addrspace(1) %8, align 8
  %10 = load i32, ptr addrspace(1) %9, align 4
  %11 = getelementptr inbounds i8, ptr addrspace(3) %3, i32 %10
  store i8 3, ptr addrspace(3) %7, align 4
  store i8 3, ptr addrspace(3) %11, align 8
  ret void
}

; Function Attrs: sanitize_address
define amdgpu_kernel void @k0() #1 !llvm.amdgcn.lds.kernel.id !2 {
; CHECK-LABEL: define amdgpu_kernel void @k0(
; CHECK-SAME: ) #[[ATTR1:[0-9]+]] !llvm.amdgcn.lds.kernel.id [[META3:![0-9]+]] {
; CHECK-NEXT:  [[WID:.*]]:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.workitem.id.y()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.workitem.id.z()
; CHECK-NEXT:    [[TMP3:%.*]] = or i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = or i32 [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label %[[MALLOC:.*]], label %[[BB48:.*]]
; CHECK:       [[MALLOC]]:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE:%.*]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 2), align 4
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds ptr addrspace(4), ptr addrspace(4) [[TMP9]], i64 15
; CHECK-NEXT:    store i32 [[TMP8]], ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), align 4
; CHECK-NEXT:    [[TMP11:%.*]] = ptrtoint ptr addrspace(4) [[TMP10]] to i64
; CHECK-NEXT:    [[TMP12:%.*]] = lshr i64 [[TMP11]], 3
; CHECK-NEXT:    [[TMP13:%.*]] = add i64 [[TMP12]], 2147450880
; CHECK-NEXT:    [[TMP14:%.*]] = inttoptr i64 [[TMP13]] to ptr
; CHECK-NEXT:    [[TMP15:%.*]] = load i8, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP16:%.*]] = icmp ne i8 [[TMP15]], 0
; CHECK-NEXT:    [[TMP17:%.*]] = and i64 [[TMP11]], 7
; CHECK-NEXT:    [[TMP18:%.*]] = add i64 [[TMP17]], 3
; CHECK-NEXT:    [[TMP19:%.*]] = trunc i64 [[TMP18]] to i8
; CHECK-NEXT:    [[TMP20:%.*]] = icmp sge i8 [[TMP19]], [[TMP15]]
; CHECK-NEXT:    [[TMP21:%.*]] = and i1 [[TMP16]], [[TMP20]]
; CHECK-NEXT:    [[TMP22:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP21]])
; CHECK-NEXT:    [[TMP23:%.*]] = icmp ne i64 [[TMP22]], 0
; CHECK-NEXT:    br i1 [[TMP23]], label %[[ASAN_REPORT:.*]], label %[[BB26:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT]]:
; CHECK-NEXT:    br i1 [[TMP21]], label %[[BB24:.*]], label %[[BB25:.*]]
; CHECK:       [[BB24]]:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP11]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB25]]
; CHECK:       [[BB25]]:
; CHECK-NEXT:    br label %[[BB26]]
; CHECK:       [[BB26]]:
; CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr addrspace(4) [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP27]], ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 1), align 4
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 [[TMP27]], 7
; CHECK-NEXT:    [[TMP29:%.*]] = udiv i32 [[TMP28]], 8
; CHECK-NEXT:    [[TMP30:%.*]] = mul i32 [[TMP29]], 8
; CHECK-NEXT:    store i32 [[TMP30]], ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 2), align 4
; CHECK-NEXT:    [[TMP31:%.*]] = add i32 [[TMP8]], [[TMP30]]
; CHECK-NEXT:    store i32 [[TMP31]], ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 0), align 4
; CHECK-NEXT:    [[TMP32:%.*]] = load i32, ptr addrspace(4) [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP32]], ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 1), align 4
; CHECK-NEXT:    [[TMP33:%.*]] = add i32 [[TMP32]], 7
; CHECK-NEXT:    [[TMP34:%.*]] = udiv i32 [[TMP33]], 8
; CHECK-NEXT:    [[TMP35:%.*]] = mul i32 [[TMP34]], 8
; CHECK-NEXT:    store i32 [[TMP35]], ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 2), align 4
; CHECK-NEXT:    [[TMP36:%.*]] = add i32 [[TMP31]], [[TMP35]]
; CHECK-NEXT:    [[TMP37:%.*]] = zext i32 [[TMP36]] to i64
; CHECK-NEXT:    [[TMP38:%.*]] = call ptr @llvm.returnaddress(i32 0)
; CHECK-NEXT:    [[TMP39:%.*]] = ptrtoint ptr [[TMP38]] to i64
; CHECK-NEXT:    [[TMP40:%.*]] = call i64 @__asan_malloc_impl(i64 [[TMP37]], i64 [[TMP39]])
; CHECK-NEXT:    [[TMP41:%.*]] = inttoptr i64 [[TMP40]] to ptr addrspace(1)
; CHECK-NEXT:    store ptr addrspace(1) [[TMP41]], ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP41]], i64 68
; CHECK-NEXT:    [[TMP45:%.*]] = ptrtoint ptr addrspace(1) [[TMP44]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP45]], i64 28)
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP41]], i64 33
; CHECK-NEXT:    [[TMP51:%.*]] = ptrtoint ptr addrspace(1) [[TMP50]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP51]], i64 31)
; CHECK-NEXT:    [[TMP56:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP41]], i64 8
; CHECK-NEXT:    [[TMP57:%.*]] = ptrtoint ptr addrspace(1) [[TMP56]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP57]], i64 24)
; CHECK-NEXT:    br label %[[BB48]]
; CHECK:       [[BB48]]:
; CHECK-NEXT:    [[XYZCOND:%.*]] = phi i1 [ false, %[[WID]] ], [ true, %[[BB26]] ]
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    [[TMP61:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
; CHECK-NEXT:    [[TMP62:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP61]]
; CHECK-NEXT:    [[TMP63:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
; CHECK-NEXT:    [[TMP64:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP63]]
; CHECK-NEXT:    call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.k0.dynlds) ]
; CHECK-NEXT:    call void @use_variables()
; CHECK-NEXT:    [[TMP65:%.*]] = ptrtoint ptr addrspace(3) [[TMP62]] to i32
; CHECK-NEXT:    [[TMP66:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP67:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP66]], i32 [[TMP65]]
; CHECK-NEXT:    [[TMP68:%.*]] = ptrtoint ptr addrspace(1) [[TMP67]] to i64
; CHECK-NEXT:    [[TMP69:%.*]] = lshr i64 [[TMP68]], 3
; CHECK-NEXT:    [[TMP70:%.*]] = add i64 [[TMP69]], 2147450880
; CHECK-NEXT:    [[TMP71:%.*]] = inttoptr i64 [[TMP70]] to ptr
; CHECK-NEXT:    [[TMP72:%.*]] = load i8, ptr [[TMP71]], align 1
; CHECK-NEXT:    [[TMP73:%.*]] = icmp ne i8 [[TMP72]], 0
; CHECK-NEXT:    [[TMP74:%.*]] = and i64 [[TMP68]], 7
; CHECK-NEXT:    [[TMP75:%.*]] = trunc i64 [[TMP74]] to i8
; CHECK-NEXT:    [[TMP76:%.*]] = icmp sge i8 [[TMP75]], [[TMP72]]
; CHECK-NEXT:    [[TMP77:%.*]] = and i1 [[TMP73]], [[TMP76]]
; CHECK-NEXT:    [[TMP78:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP77]])
; CHECK-NEXT:    [[TMP79:%.*]] = icmp ne i64 [[TMP78]], 0
; CHECK-NEXT:    br i1 [[TMP79]], label %[[ASAN_REPORT1:.*]], label %[[BB70:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT1]]:
; CHECK-NEXT:    br i1 [[TMP77]], label %[[BB68:.*]], label %[[BB69:.*]]
; CHECK:       [[BB68]]:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP68]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB69]]
; CHECK:       [[BB69]]:
; CHECK-NEXT:    br label %[[BB70]]
; CHECK:       [[BB70]]:
; CHECK-NEXT:    store i8 7, ptr addrspace(3) [[TMP62]], align 1
; CHECK-NEXT:    [[TMP83:%.*]] = ptrtoint ptr addrspace(3) [[TMP64]] to i64
; CHECK-NEXT:    [[TMP84:%.*]] = add i64 [[TMP83]], 3
; CHECK-NEXT:    [[TMP85:%.*]] = inttoptr i64 [[TMP84]] to ptr addrspace(3)
; CHECK-NEXT:    [[TMP86:%.*]] = ptrtoint ptr addrspace(3) [[TMP64]] to i32
; CHECK-NEXT:    [[TMP87:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP88:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP87]], i32 [[TMP86]]
; CHECK-NEXT:    [[TMP89:%.*]] = ptrtoint ptr addrspace(1) [[TMP88]] to i64
; CHECK-NEXT:    [[TMP90:%.*]] = lshr i64 [[TMP89]], 3
; CHECK-NEXT:    [[TMP91:%.*]] = add i64 [[TMP90]], 2147450880
; CHECK-NEXT:    [[TMP92:%.*]] = inttoptr i64 [[TMP91]] to ptr
; CHECK-NEXT:    [[TMP93:%.*]] = load i8, ptr [[TMP92]], align 1
; CHECK-NEXT:    [[TMP94:%.*]] = icmp ne i8 [[TMP93]], 0
; CHECK-NEXT:    [[TMP95:%.*]] = and i64 [[TMP89]], 7
; CHECK-NEXT:    [[TMP96:%.*]] = trunc i64 [[TMP95]] to i8
; CHECK-NEXT:    [[TMP97:%.*]] = icmp sge i8 [[TMP96]], [[TMP93]]
; CHECK-NEXT:    [[TMP98:%.*]] = and i1 [[TMP94]], [[TMP97]]
; CHECK-NEXT:    [[TMP99:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP98]])
; CHECK-NEXT:    [[TMP100:%.*]] = icmp ne i64 [[TMP99]], 0
; CHECK-NEXT:    br i1 [[TMP100]], label %[[ASAN_REPORT2:.*]], label %[[BB91:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT2]]:
; CHECK-NEXT:    br i1 [[TMP98]], label %[[BB89:.*]], label %[[BB90:.*]]
; CHECK:       [[BB89]]:
; CHECK-NEXT:    call void @__asan_report_store_n(i64 [[TMP89]], i64 4) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB90]]
; CHECK:       [[BB90]]:
; CHECK-NEXT:    br label %[[BB91]]
; CHECK:       [[BB91]]:
; CHECK-NEXT:    [[TMP104:%.*]] = ptrtoint ptr addrspace(3) [[TMP85]] to i32
; CHECK-NEXT:    [[TMP105:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP106:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP105]], i32 [[TMP104]]
; CHECK-NEXT:    [[TMP107:%.*]] = ptrtoint ptr addrspace(1) [[TMP106]] to i64
; CHECK-NEXT:    [[TMP108:%.*]] = lshr i64 [[TMP107]], 3
; CHECK-NEXT:    [[TMP109:%.*]] = add i64 [[TMP108]], 2147450880
; CHECK-NEXT:    [[TMP110:%.*]] = inttoptr i64 [[TMP109]] to ptr
; CHECK-NEXT:    [[TMP111:%.*]] = load i8, ptr [[TMP110]], align 1
; CHECK-NEXT:    [[TMP112:%.*]] = icmp ne i8 [[TMP111]], 0
; CHECK-NEXT:    [[TMP113:%.*]] = and i64 [[TMP107]], 7
; CHECK-NEXT:    [[TMP114:%.*]] = trunc i64 [[TMP113]] to i8
; CHECK-NEXT:    [[TMP115:%.*]] = icmp sge i8 [[TMP114]], [[TMP111]]
; CHECK-NEXT:    [[TMP116:%.*]] = and i1 [[TMP112]], [[TMP115]]
; CHECK-NEXT:    [[TMP117:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP116]])
; CHECK-NEXT:    [[TMP118:%.*]] = icmp ne i64 [[TMP117]], 0
; CHECK-NEXT:    br i1 [[TMP118]], label %[[ASAN_REPORT3:.*]], label %[[BB109:.*]], !prof [[PROF2]]
; CHECK:       [[ASAN_REPORT3]]:
; CHECK-NEXT:    br i1 [[TMP116]], label %[[BB107:.*]], label %[[BB108:.*]]
; CHECK:       [[BB107]]:
; CHECK-NEXT:    call void @__asan_report_store_n(i64 [[TMP107]], i64 4) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB108]]
; CHECK:       [[BB108]]:
; CHECK-NEXT:    br label %[[BB109]]
; CHECK:       [[BB109]]:
; CHECK-NEXT:    store i32 8, ptr addrspace(3) [[TMP64]], align 2
; CHECK-NEXT:    br label %[[CONDFREE:.*]]
; CHECK:       [[CONDFREE]]:
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    br i1 [[XYZCOND]], label %[[FREE:.*]], label %[[END:.*]]
; CHECK:       [[FREE]]:
; CHECK-NEXT:    [[TMP122:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP123:%.*]] = call ptr @llvm.returnaddress(i32 0)
; CHECK-NEXT:    [[TMP124:%.*]] = ptrtoint ptr [[TMP123]] to i64
; CHECK-NEXT:    [[TMP125:%.*]] = ptrtoint ptr addrspace(1) [[TMP122]] to i64
; CHECK-NEXT:    call void @__asan_free_impl(i64 [[TMP125]], i64 [[TMP124]])
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
WId:
  %0 = call i32 @llvm.amdgcn.workitem.id.x()
  %1 = call i32 @llvm.amdgcn.workitem.id.y()
  %2 = call i32 @llvm.amdgcn.workitem.id.z()
  %3 = or i32 %0, %1
  %4 = or i32 %3, %2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %Malloc, label %26

Malloc:
  %6 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
  %7 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 2), align 4
  %8 = add i32 %6, %7
  %9 = call ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr()
  %10 = getelementptr inbounds ptr addrspace(4), ptr addrspace(4) %9, i64 15
  store i32 %8, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), align 4
  %11 = load i32, ptr addrspace(4) %10, align 4
  store i32 %11, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 1), align 4
  %12 = add i32 %11, 7
  %13 = udiv i32 %12, 8
  %14 = mul i32 %13, 8
  store i32 %14, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 2), align 4
  %15 = add i32 %8, %14
  store i32 %15, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 0), align 4
  %16 = load i32, ptr addrspace(4) %10, align 4
  store i32 %16, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 1), align 4
  %17 = add i32 %16, 7
  %18 = udiv i32 %17, 8
  %19 = mul i32 %18, 8
  store i32 %19, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 2), align 4
  %20 = add i32 %15, %19
  %21 = zext i32 %20 to i64
  %22 = call ptr @llvm.returnaddress(i32 0)
  %23 = ptrtoint ptr %22 to i64
  %24 = call i64 @__asan_malloc_impl(i64 %21, i64 %23)
  %25 = inttoptr i64 %24 to ptr addrspace(1)
  store ptr addrspace(1) %25, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  br label %26

26:
  %xyzCond = phi i1 [ false, %WId ], [ true, %Malloc ]
  call void @llvm.amdgcn.s.barrier()
  %27 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
  %28 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %27
  %29 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
  %30 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %29
  call void @llvm.donothing() [ "ExplicitUse"(ptr addrspace(3) @llvm.amdgcn.k0.dynlds) ]
  call void @use_variables()
  store i8 7, ptr addrspace(3) %28, align 1
  store i32 8, ptr addrspace(3) %30, align 2
  br label %CondFree

CondFree:
  call void @llvm.amdgcn.s.barrier()
  br i1 %xyzCond, label %Free, label %End

Free:
  %31 = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  %32 = call ptr @llvm.returnaddress(i32 0)
  %33 = ptrtoint ptr %32 to i64
  %34 = ptrtoint ptr addrspace(1) %31 to i64
  call void @__asan_free_impl(i64 %34, i64 %33)
  br label %End

End:
  ret void
}


declare void @llvm.donothing() #2
declare i32 @llvm.amdgcn.workitem.id.x() #3
declare i32 @llvm.amdgcn.workitem.id.y() #3
declare i32 @llvm.amdgcn.workitem.id.z() #3
declare align 4 ptr addrspace(4) @llvm.amdgcn.implicitarg.ptr() #3
declare ptr @llvm.returnaddress(i32 immarg) #2
declare i64 @__asan_malloc_impl(i64, i64)
declare void @llvm.amdgcn.s.barrier() #4
declare void @__asan_free_impl(i64, i64)
declare i32 @llvm.amdgcn.lds.kernel.id() #3

attributes #0 = { sanitize_address }
attributes #1 = { sanitize_address "amdgpu-lds-size"="24,24" }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { convergent nocallback nofree nounwind willreturn }

!0 = !{i32 0, i32 1}
!1 = !{i32 24, i32 25}
!2 = !{i32 0}
;.
; CHECK: attributes #[[ATTR0]] = { sanitize_address }
; CHECK: attributes #[[ATTR1]] = { sanitize_address "amdgpu-lds-size"="96,96" }
; CHECK: attributes #[[ATTR2:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(none) }
; CHECK: attributes #[[ATTR3:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; CHECK: attributes #[[ATTR4:[0-9]+]] = { convergent nocallback nofree nounwind willreturn }
; CHECK: attributes #[[ATTR5:[0-9]+]] = { convergent nocallback nofree nounwind willreturn memory(none) }
; CHECK: attributes #[[ATTR6:[0-9]+]] = { convergent nocallback nofree nounwind }
; CHECK: attributes #[[ATTR7:[0-9]+]] = { nounwind }
; CHECK: attributes #[[ATTR8]] = { nomerge }
;.
; CHECK: [[META0]] = !{i32 0, i32 1}
; CHECK: [[META1]] = !{i32 96, i32 97}
; CHECK: [[PROF2]] = !{!"branch_weights", i32 1, i32 1048575}
; CHECK: [[META3]] = !{i32 0}
;.
