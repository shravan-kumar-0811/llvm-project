; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --version 5
; RUN: opt < %s -passes=asan -S -mtriple=amdgcn-amd-amdhsa | FileCheck %s

%llvm.amdgcn.sw.lds.k0.md.type = type { %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item, %llvm.amdgcn.sw.lds.k0.md.item }
%llvm.amdgcn.sw.lds.k0.md.item = type { i32, i32, i32 }

@llvm.amdgcn.sw.lds.k0 = internal addrspace(3) global ptr poison, no_sanitize_address, align 8, !absolute_symbol !0
@llvm.amdgcn.sw.lds.k0.md = internal addrspace(1) global %llvm.amdgcn.sw.lds.k0.md.type { %llvm.amdgcn.sw.lds.k0.md.item { i32 0, i32 8, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 8, i32 1, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 16, i32 4, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 24, i32 3, i32 8 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 32, i32 4, i32 8 } }, no_sanitize_address
@llvm.amdgcn.sw.lds.base.table = internal addrspace(1) constant [1 x ptr addrspace(3)] [ptr addrspace(3) @llvm.amdgcn.sw.lds.k0], no_sanitize_address
@llvm.amdgcn.sw.lds.offset.table = internal addrspace(1) constant [1 x [2 x ptr addrspace(1)]] [[2 x ptr addrspace(1)] [ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 0)]], no_sanitize_address

; Function Attrs: sanitize_address
; CHECK: @llvm.amdgcn.sw.lds.k0 = internal addrspace(3) global ptr poison, no_sanitize_address, align 8, !absolute_symbol [[META0:![0-9]+]]
; CHECK: @llvm.amdgcn.sw.lds.k0.md = internal addrspace(1) global %llvm.amdgcn.sw.lds.k0.md.type { %llvm.amdgcn.sw.lds.k0.md.item { i32 0, i32 8, i32 32 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 32, i32 1, i32 32 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 64, i32 4, i32 32 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 96, i32 3, i32 32 }, %llvm.amdgcn.sw.lds.k0.md.item { i32 128, i32 4, i32 32 } }, no_sanitize_address
; @llvm.amdgcn.sw.lds.base.table = internal addrspace(1) constant [1 x ptr addrspace(3)] [ptr addrspace(3) @llvm.amdgcn.sw.lds.k0], no_sanitize_address
; @llvm.amdgcn.sw.lds.offset.table = internal addrspace(1) constant [1 x [2 x ptr addrspace(1)]] [[2 x ptr addrspace(1)] [ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 3, i32 0), ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 0)]], no_sanitize_address
; CHECK: @llvm.used = appending addrspace(1) global [1 x ptr] [ptr @asan.module_ctor], section "llvm.metadata"
; CHECK: @___asan_globals_registered = common hidden addrspace(1) global i64 0
; CHECK: @__start_asan_globals = extern_weak hidden addrspace(1) global i64
; CHECK: @__stop_asan_globals = extern_weak hidden addrspace(1) global i64
; CHECK: @llvm.global_ctors = appending addrspace(1) global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @asan.module_ctor, ptr @asan.module_ctor }]
;.
define void @use_variables() #0 {
; CHECK-LABEL: define void @use_variables(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.lds.kernel.id()
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr addrspace(3)], ptr addrspace(1) @llvm.amdgcn.sw.lds.base.table, i32 0, i32 [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = ptrtoint ptr addrspace(1) [[TMP2]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = lshr i64 [[TMP3]], 3
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], 2147450880
; CHECK-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ne i8 [[TMP7]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = and i64 [[TMP3]], 7
; CHECK-NEXT:    [[TMP10:%.*]] = add i64 [[TMP9]], 3
; CHECK-NEXT:    [[TMP11:%.*]] = trunc i64 [[TMP10]] to i8
; CHECK-NEXT:    [[TMP12:%.*]] = icmp sge i8 [[TMP11]], [[TMP7]]
; CHECK-NEXT:    [[TMP13:%.*]] = and i1 [[TMP8]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP13]])
; CHECK-NEXT:    [[TMP15:%.*]] = icmp ne i64 [[TMP14]], 0
; CHECK-NEXT:    br i1 [[TMP15]], label %[[ASAN_REPORT:.*]], label %[[BB18:.*]], !prof [[PROF1:![0-9]+]]
; CHECK:       [[ASAN_REPORT]]:
; CHECK-NEXT:    br i1 [[TMP13]], label %[[BB16:.*]], label %[[BB17:.*]]
; CHECK:       [[BB16]]:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP3]]) #[[ATTR8:[0-9]+]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB17]]
; CHECK:       [[BB17]]:
; CHECK-NEXT:    br label %[[BB18]]
; CHECK:       [[BB18]]:
; CHECK-NEXT:    [[TMP19:%.*]] = load ptr addrspace(3), ptr addrspace(1) [[TMP2]], align 4
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr inbounds [1 x [2 x ptr addrspace(1)]], ptr addrspace(1) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 [[TMP1]], i32 0
; CHECK-NEXT:    [[TMP21:%.*]] = ptrtoint ptr addrspace(1) [[TMP20]] to i64
; CHECK-NEXT:    [[TMP22:%.*]] = lshr i64 [[TMP21]], 3
; CHECK-NEXT:    [[TMP23:%.*]] = add i64 [[TMP22]], 2147450880
; CHECK-NEXT:    [[TMP24:%.*]] = inttoptr i64 [[TMP23]] to ptr
; CHECK-NEXT:    [[TMP25:%.*]] = load i8, ptr [[TMP24]], align 1
; CHECK-NEXT:    [[TMP26:%.*]] = icmp ne i8 [[TMP25]], 0
; CHECK-NEXT:    [[TMP27:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP26]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i64 [[TMP27]], 0
; CHECK-NEXT:    br i1 [[TMP28]], label %[[ASAN_REPORT1:.*]], label %[[BB31:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT1]]:
; CHECK-NEXT:    br i1 [[TMP26]], label %[[BB29:.*]], label %[[BB30:.*]]
; CHECK:       [[BB29]]:
; CHECK-NEXT:    call void @__asan_report_load8(i64 [[TMP21]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB30]]
; CHECK:       [[BB30]]:
; CHECK-NEXT:    br label %[[BB31]]
; CHECK:       [[BB31]]:
; CHECK-NEXT:    [[TMP32:%.*]] = load ptr addrspace(1), ptr addrspace(1) [[TMP20]], align 8
; CHECK-NEXT:    [[TMP33:%.*]] = ptrtoint ptr addrspace(1) [[TMP32]] to i64
; CHECK-NEXT:    [[TMP34:%.*]] = lshr i64 [[TMP33]], 3
; CHECK-NEXT:    [[TMP35:%.*]] = add i64 [[TMP34]], 2147450880
; CHECK-NEXT:    [[TMP36:%.*]] = inttoptr i64 [[TMP35]] to ptr
; CHECK-NEXT:    [[TMP37:%.*]] = load i8, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP38:%.*]] = icmp ne i8 [[TMP37]], 0
; CHECK-NEXT:    [[TMP39:%.*]] = and i64 [[TMP33]], 7
; CHECK-NEXT:    [[TMP40:%.*]] = add i64 [[TMP39]], 3
; CHECK-NEXT:    [[TMP41:%.*]] = trunc i64 [[TMP40]] to i8
; CHECK-NEXT:    [[TMP42:%.*]] = icmp sge i8 [[TMP41]], [[TMP37]]
; CHECK-NEXT:    [[TMP43:%.*]] = and i1 [[TMP38]], [[TMP42]]
; CHECK-NEXT:    [[TMP44:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP43]])
; CHECK-NEXT:    [[TMP45:%.*]] = icmp ne i64 [[TMP44]], 0
; CHECK-NEXT:    br i1 [[TMP45]], label %[[ASAN_REPORT2:.*]], label %[[BB48:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT2]]:
; CHECK-NEXT:    br i1 [[TMP43]], label %[[BB46:.*]], label %[[BB47:.*]]
; CHECK:       [[BB46]]:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP33]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB47]]
; CHECK:       [[BB47]]:
; CHECK-NEXT:    br label %[[BB48]]
; CHECK:       [[BB48]]:
; CHECK-NEXT:    [[TMP49:%.*]] = load i32, ptr addrspace(1) [[TMP32]], align 4
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr inbounds i8, ptr addrspace(3) [[TMP19]], i32 [[TMP49]]
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [1 x [2 x ptr addrspace(1)]], ptr addrspace(1) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 [[TMP1]], i32 1
; CHECK-NEXT:    [[TMP52:%.*]] = ptrtoint ptr addrspace(1) [[TMP51]] to i64
; CHECK-NEXT:    [[TMP53:%.*]] = lshr i64 [[TMP52]], 3
; CHECK-NEXT:    [[TMP54:%.*]] = add i64 [[TMP53]], 2147450880
; CHECK-NEXT:    [[TMP55:%.*]] = inttoptr i64 [[TMP54]] to ptr
; CHECK-NEXT:    [[TMP56:%.*]] = load i8, ptr [[TMP55]], align 1
; CHECK-NEXT:    [[TMP57:%.*]] = icmp ne i8 [[TMP56]], 0
; CHECK-NEXT:    [[TMP58:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP57]])
; CHECK-NEXT:    [[TMP59:%.*]] = icmp ne i64 [[TMP58]], 0
; CHECK-NEXT:    br i1 [[TMP59]], label %[[ASAN_REPORT3:.*]], label %[[BB62:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT3]]:
; CHECK-NEXT:    br i1 [[TMP57]], label %[[BB60:.*]], label %[[BB61:.*]]
; CHECK:       [[BB60]]:
; CHECK-NEXT:    call void @__asan_report_load8(i64 [[TMP52]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB61]]
; CHECK:       [[BB61]]:
; CHECK-NEXT:    br label %[[BB62]]
; CHECK:       [[BB62]]:
; CHECK-NEXT:    [[TMP63:%.*]] = load ptr addrspace(1), ptr addrspace(1) [[TMP51]], align 8
; CHECK-NEXT:    [[TMP64:%.*]] = ptrtoint ptr addrspace(1) [[TMP63]] to i64
; CHECK-NEXT:    [[TMP65:%.*]] = lshr i64 [[TMP64]], 3
; CHECK-NEXT:    [[TMP66:%.*]] = add i64 [[TMP65]], 2147450880
; CHECK-NEXT:    [[TMP67:%.*]] = inttoptr i64 [[TMP66]] to ptr
; CHECK-NEXT:    [[TMP68:%.*]] = load i8, ptr [[TMP67]], align 1
; CHECK-NEXT:    [[TMP69:%.*]] = icmp ne i8 [[TMP68]], 0
; CHECK-NEXT:    [[TMP70:%.*]] = and i64 [[TMP64]], 7
; CHECK-NEXT:    [[TMP71:%.*]] = add i64 [[TMP70]], 3
; CHECK-NEXT:    [[TMP72:%.*]] = trunc i64 [[TMP71]] to i8
; CHECK-NEXT:    [[TMP73:%.*]] = icmp sge i8 [[TMP72]], [[TMP68]]
; CHECK-NEXT:    [[TMP74:%.*]] = and i1 [[TMP69]], [[TMP73]]
; CHECK-NEXT:    [[TMP75:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP74]])
; CHECK-NEXT:    [[TMP76:%.*]] = icmp ne i64 [[TMP75]], 0
; CHECK-NEXT:    br i1 [[TMP76]], label %[[ASAN_REPORT4:.*]], label %[[BB79:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT4]]:
; CHECK-NEXT:    br i1 [[TMP74]], label %[[BB77:.*]], label %[[BB78:.*]]
; CHECK:       [[BB77]]:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP64]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB78]]
; CHECK:       [[BB78]]:
; CHECK-NEXT:    br label %[[BB79]]
; CHECK:       [[BB79]]:
; CHECK-NEXT:    [[TMP80:%.*]] = load i32, ptr addrspace(1) [[TMP63]], align 4
; CHECK-NEXT:    [[TMP81:%.*]] = getelementptr inbounds i8, ptr addrspace(3) [[TMP19]], i32 [[TMP80]]
; CHECK-NEXT:    [[X:%.*]] = addrspacecast ptr addrspace(3) [[TMP50]] to ptr
; CHECK-NEXT:    [[TMP82:%.*]] = addrspacecast ptr addrspace(3) [[TMP50]] to ptr
; CHECK-NEXT:    [[TMP83:%.*]] = call i1 @llvm.amdgcn.is.private(ptr [[TMP82]])
; CHECK-NEXT:    [[TMP84:%.*]] = xor i1 [[TMP83]], true
; CHECK-NEXT:    br i1 [[TMP84]], label %[[BB85:.*]], label %[[BB101:.*]]
; CHECK:       [[BB85]]:
; CHECK-NEXT:    [[TMP86:%.*]] = ptrtoint ptr [[TMP82]] to i64
; CHECK-NEXT:    [[TMP87:%.*]] = lshr i64 [[TMP86]], 3
; CHECK-NEXT:    [[TMP88:%.*]] = add i64 [[TMP87]], 2147450880
; CHECK-NEXT:    [[TMP89:%.*]] = inttoptr i64 [[TMP88]] to ptr
; CHECK-NEXT:    [[TMP90:%.*]] = load i8, ptr [[TMP89]], align 1
; CHECK-NEXT:    [[TMP91:%.*]] = icmp ne i8 [[TMP90]], 0
; CHECK-NEXT:    [[TMP92:%.*]] = and i64 [[TMP86]], 7
; CHECK-NEXT:    [[TMP93:%.*]] = trunc i64 [[TMP92]] to i8
; CHECK-NEXT:    [[TMP94:%.*]] = icmp sge i8 [[TMP93]], [[TMP90]]
; CHECK-NEXT:    [[TMP95:%.*]] = and i1 [[TMP91]], [[TMP94]]
; CHECK-NEXT:    [[TMP96:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP95]])
; CHECK-NEXT:    [[TMP97:%.*]] = icmp ne i64 [[TMP96]], 0
; CHECK-NEXT:    br i1 [[TMP97]], label %[[ASAN_REPORT5:.*]], label %[[BB100:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT5]]:
; CHECK-NEXT:    br i1 [[TMP95]], label %[[BB98:.*]], label %[[BB99:.*]]
; CHECK:       [[BB98]]:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP86]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB99]]
; CHECK:       [[BB99]]:
; CHECK-NEXT:    br label %[[BB100]]
; CHECK:       [[BB100]]:
; CHECK-NEXT:    br label %[[BB101]]
; CHECK:       [[BB101]]:
; CHECK-NEXT:    store i8 3, ptr [[TMP82]], align 4
; CHECK-NEXT:    [[TMP102:%.*]] = call i32 @llvm.amdgcn.lds.kernel.id()
; CHECK-NEXT:    [[TMP103:%.*]] = getelementptr inbounds [1 x ptr addrspace(3)], ptr addrspace(1) @llvm.amdgcn.sw.lds.base.table, i32 0, i32 [[TMP102]]
; CHECK-NEXT:    [[TMP104:%.*]] = load ptr addrspace(3), ptr addrspace(1) [[TMP103]], align 4
; CHECK-NEXT:    [[TMP105:%.*]] = ptrtoint ptr addrspace(3) [[TMP81]] to i32
; CHECK-NEXT:    [[TMP106:%.*]] = load ptr addrspace(1), ptr addrspace(3) [[TMP104]], align 8
; CHECK-NEXT:    [[TMP107:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP106]], i32 [[TMP105]]
; CHECK-NEXT:    [[TMP108:%.*]] = ptrtoint ptr addrspace(1) [[TMP107]] to i64
; CHECK-NEXT:    [[TMP109:%.*]] = lshr i64 [[TMP108]], 3
; CHECK-NEXT:    [[TMP110:%.*]] = add i64 [[TMP109]], 2147450880
; CHECK-NEXT:    [[TMP111:%.*]] = inttoptr i64 [[TMP110]] to ptr
; CHECK-NEXT:    [[TMP112:%.*]] = load i8, ptr [[TMP111]], align 1
; CHECK-NEXT:    [[TMP113:%.*]] = icmp ne i8 [[TMP112]], 0
; CHECK-NEXT:    [[TMP114:%.*]] = and i64 [[TMP108]], 7
; CHECK-NEXT:    [[TMP115:%.*]] = trunc i64 [[TMP114]] to i8
; CHECK-NEXT:    [[TMP116:%.*]] = icmp sge i8 [[TMP115]], [[TMP112]]
; CHECK-NEXT:    [[TMP117:%.*]] = and i1 [[TMP113]], [[TMP116]]
; CHECK-NEXT:    [[TMP118:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP117]])
; CHECK-NEXT:    [[TMP119:%.*]] = icmp ne i64 [[TMP118]], 0
; CHECK-NEXT:    br i1 [[TMP119]], label %[[ASAN_REPORT6:.*]], label %[[BB122:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT6]]:
; CHECK-NEXT:    br i1 [[TMP117]], label %[[BB120:.*]], label %[[BB121:.*]]
; CHECK:       [[BB120]]:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP108]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB121]]
; CHECK:       [[BB121]]:
; CHECK-NEXT:    br label %[[BB122]]
; CHECK:       [[BB122]]:
; CHECK-NEXT:    store i8 3, ptr addrspace(3) [[TMP81]], align 8
; CHECK-NEXT:    ret void
;
  %1 = call i32 @llvm.amdgcn.lds.kernel.id()
  %2 = getelementptr inbounds [1 x ptr addrspace(3)], ptr addrspace(1) @llvm.amdgcn.sw.lds.base.table, i32 0, i32 %1
  %3 = load ptr addrspace(3), ptr addrspace(1) %2, align 4
  %4 = getelementptr inbounds [1 x [2 x ptr addrspace(1)]], ptr addrspace(1) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 %1, i32 0
  %5 = load ptr addrspace(1), ptr addrspace(1) %4, align 8
  %6 = load i32, ptr addrspace(1) %5, align 4
  %7 = getelementptr inbounds i8, ptr addrspace(3) %3, i32 %6
  %8 = getelementptr inbounds [1 x [2 x ptr addrspace(1)]], ptr addrspace(1) @llvm.amdgcn.sw.lds.offset.table, i32 0, i32 %1, i32 1
  %9 = load ptr addrspace(1), ptr addrspace(1) %8, align 8
  %10 = load i32, ptr addrspace(1) %9, align 4
  %11 = getelementptr inbounds i8, ptr addrspace(3) %3, i32 %10
  %X = addrspacecast ptr addrspace(3) %7 to ptr
  %12 = addrspacecast ptr addrspace(3) %7 to ptr
  store i8 3, ptr %12, align 4
  store i8 3, ptr addrspace(3) %11, align 8
  ret void
}

; Function Attrs: sanitize_address
define amdgpu_kernel void @k0() #1 !llvm.amdgcn.lds.kernel.id !1 {
; CHECK-LABEL: define amdgpu_kernel void @k0(
; CHECK-SAME: ) #[[ATTR1:[0-9]+]] !llvm.amdgcn.lds.kernel.id [[META2:![0-9]+]] {
; CHECK-NEXT:  [[WID:.*]]:
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @llvm.amdgcn.workitem.id.y()
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @llvm.amdgcn.workitem.id.z()
; CHECK-NEXT:    [[TMP3:%.*]] = or i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = or i32 [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label %[[MALLOC:.*]], label %[[BB24:.*]]
; CHECK:       [[MALLOC]]:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE:%.*]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 0), align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 2), align 4
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = zext i32 [[TMP8]] to i64
; CHECK-NEXT:    [[TMP10:%.*]] = call ptr @llvm.returnaddress(i32 0)
; CHECK-NEXT:    [[TMP11:%.*]] = ptrtoint ptr [[TMP10]] to i64
; CHECK-NEXT:    [[TMP12:%.*]] = call i64 @__asan_malloc_impl(i64 [[TMP9]], i64 [[TMP11]])
; CHECK-NEXT:    [[TMP13:%.*]] = inttoptr i64 [[TMP12]] to ptr addrspace(1)
; CHECK-NEXT:    store ptr addrspace(1) [[TMP13]], ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP13]], i64 132
; CHECK-NEXT:    [[TMP17:%.*]] = ptrtoint ptr addrspace(1) [[TMP16]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP17]], i64 28)
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP13]], i64 99
; CHECK-NEXT:    [[TMP23:%.*]] = ptrtoint ptr addrspace(1) [[TMP22]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP23]], i64 29)
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP13]], i64 68
; CHECK-NEXT:    [[TMP29:%.*]] = ptrtoint ptr addrspace(1) [[TMP28]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP29]], i64 28)
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP13]], i64 33
; CHECK-NEXT:    [[TMP35:%.*]] = ptrtoint ptr addrspace(1) [[TMP34]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP35]], i64 31)
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP13]], i64 8
; CHECK-NEXT:    [[TMP41:%.*]] = ptrtoint ptr addrspace(1) [[TMP40]] to i64
; CHECK-NEXT:    call void @__asan_poison_region(i64 [[TMP41]], i64 24)
; CHECK-NEXT:    br label %[[BB24]]
; CHECK:       [[BB24]]:
; CHECK-NEXT:    [[XYZCOND:%.*]] = phi i1 [ false, %[[WID]] ], [ true, %[[MALLOC]] ]
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    [[TMP45:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
; CHECK-NEXT:    [[TMP46:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP45]]
; CHECK-NEXT:    [[TMP47:%.*]] = load i32, ptr addrspace(1) getelementptr inbounds ([[LLVM_AMDGCN_SW_LDS_K0_MD_TYPE]], ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
; CHECK-NEXT:    [[TMP48:%.*]] = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 [[TMP47]]
; CHECK-NEXT:    call void @use_variables()
; CHECK-NEXT:    [[TMP49:%.*]] = ptrtoint ptr addrspace(3) [[TMP46]] to i32
; CHECK-NEXT:    [[TMP50:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP50]], i32 [[TMP49]]
; CHECK-NEXT:    [[TMP52:%.*]] = ptrtoint ptr addrspace(1) [[TMP51]] to i64
; CHECK-NEXT:    [[TMP53:%.*]] = lshr i64 [[TMP52]], 3
; CHECK-NEXT:    [[TMP54:%.*]] = add i64 [[TMP53]], 2147450880
; CHECK-NEXT:    [[TMP55:%.*]] = inttoptr i64 [[TMP54]] to ptr
; CHECK-NEXT:    [[TMP56:%.*]] = load i8, ptr [[TMP55]], align 1
; CHECK-NEXT:    [[TMP57:%.*]] = icmp ne i8 [[TMP56]], 0
; CHECK-NEXT:    [[TMP58:%.*]] = and i64 [[TMP52]], 7
; CHECK-NEXT:    [[TMP59:%.*]] = trunc i64 [[TMP58]] to i8
; CHECK-NEXT:    [[TMP60:%.*]] = icmp sge i8 [[TMP59]], [[TMP56]]
; CHECK-NEXT:    [[TMP61:%.*]] = and i1 [[TMP57]], [[TMP60]]
; CHECK-NEXT:    [[TMP62:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP61]])
; CHECK-NEXT:    [[TMP63:%.*]] = icmp ne i64 [[TMP62]], 0
; CHECK-NEXT:    br i1 [[TMP63]], label %[[ASAN_REPORT:.*]], label %[[BB46:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT]]:
; CHECK-NEXT:    br i1 [[TMP61]], label %[[BB44:.*]], label %[[BB45:.*]]
; CHECK:       [[BB44]]:
; CHECK-NEXT:    call void @__asan_report_store1(i64 [[TMP52]]) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB45]]
; CHECK:       [[BB45]]:
; CHECK-NEXT:    br label %[[BB46]]
; CHECK:       [[BB46]]:
; CHECK-NEXT:    store i8 7, ptr addrspace(3) [[TMP46]], align 1
; CHECK-NEXT:    [[TMP67:%.*]] = ptrtoint ptr addrspace(3) [[TMP48]] to i64
; CHECK-NEXT:    [[TMP68:%.*]] = add i64 [[TMP67]], 3
; CHECK-NEXT:    [[TMP69:%.*]] = inttoptr i64 [[TMP68]] to ptr addrspace(3)
; CHECK-NEXT:    [[TMP70:%.*]] = ptrtoint ptr addrspace(3) [[TMP48]] to i32
; CHECK-NEXT:    [[TMP71:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP72:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP71]], i32 [[TMP70]]
; CHECK-NEXT:    [[TMP73:%.*]] = ptrtoint ptr addrspace(1) [[TMP72]] to i64
; CHECK-NEXT:    [[TMP74:%.*]] = lshr i64 [[TMP73]], 3
; CHECK-NEXT:    [[TMP75:%.*]] = add i64 [[TMP74]], 2147450880
; CHECK-NEXT:    [[TMP76:%.*]] = inttoptr i64 [[TMP75]] to ptr
; CHECK-NEXT:    [[TMP77:%.*]] = load i8, ptr [[TMP76]], align 1
; CHECK-NEXT:    [[TMP78:%.*]] = icmp ne i8 [[TMP77]], 0
; CHECK-NEXT:    [[TMP79:%.*]] = and i64 [[TMP73]], 7
; CHECK-NEXT:    [[TMP80:%.*]] = trunc i64 [[TMP79]] to i8
; CHECK-NEXT:    [[TMP81:%.*]] = icmp sge i8 [[TMP80]], [[TMP77]]
; CHECK-NEXT:    [[TMP82:%.*]] = and i1 [[TMP78]], [[TMP81]]
; CHECK-NEXT:    [[TMP83:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP82]])
; CHECK-NEXT:    [[TMP84:%.*]] = icmp ne i64 [[TMP83]], 0
; CHECK-NEXT:    br i1 [[TMP84]], label %[[ASAN_REPORT1:.*]], label %[[BB67:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT1]]:
; CHECK-NEXT:    br i1 [[TMP82]], label %[[BB65:.*]], label %[[BB66:.*]]
; CHECK:       [[BB65]]:
; CHECK-NEXT:    call void @__asan_report_store_n(i64 [[TMP73]], i64 4) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB66]]
; CHECK:       [[BB66]]:
; CHECK-NEXT:    br label %[[BB67]]
; CHECK:       [[BB67]]:
; CHECK-NEXT:    [[TMP88:%.*]] = ptrtoint ptr addrspace(3) [[TMP69]] to i32
; CHECK-NEXT:    [[TMP89:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP90:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[TMP89]], i32 [[TMP88]]
; CHECK-NEXT:    [[TMP91:%.*]] = ptrtoint ptr addrspace(1) [[TMP90]] to i64
; CHECK-NEXT:    [[TMP92:%.*]] = lshr i64 [[TMP91]], 3
; CHECK-NEXT:    [[TMP93:%.*]] = add i64 [[TMP92]], 2147450880
; CHECK-NEXT:    [[TMP94:%.*]] = inttoptr i64 [[TMP93]] to ptr
; CHECK-NEXT:    [[TMP95:%.*]] = load i8, ptr [[TMP94]], align 1
; CHECK-NEXT:    [[TMP96:%.*]] = icmp ne i8 [[TMP95]], 0
; CHECK-NEXT:    [[TMP97:%.*]] = and i64 [[TMP91]], 7
; CHECK-NEXT:    [[TMP98:%.*]] = trunc i64 [[TMP97]] to i8
; CHECK-NEXT:    [[TMP99:%.*]] = icmp sge i8 [[TMP98]], [[TMP95]]
; CHECK-NEXT:    [[TMP100:%.*]] = and i1 [[TMP96]], [[TMP99]]
; CHECK-NEXT:    [[TMP101:%.*]] = call i64 @llvm.amdgcn.ballot.i64(i1 [[TMP100]])
; CHECK-NEXT:    [[TMP102:%.*]] = icmp ne i64 [[TMP101]], 0
; CHECK-NEXT:    br i1 [[TMP102]], label %[[ASAN_REPORT2:.*]], label %[[BB85:.*]], !prof [[PROF1]]
; CHECK:       [[ASAN_REPORT2]]:
; CHECK-NEXT:    br i1 [[TMP100]], label %[[BB83:.*]], label %[[BB84:.*]]
; CHECK:       [[BB83]]:
; CHECK-NEXT:    call void @__asan_report_store_n(i64 [[TMP91]], i64 4) #[[ATTR8]]
; CHECK-NEXT:    call void @llvm.amdgcn.unreachable()
; CHECK-NEXT:    br label %[[BB84]]
; CHECK:       [[BB84]]:
; CHECK-NEXT:    br label %[[BB85]]
; CHECK:       [[BB85]]:
; CHECK-NEXT:    store i32 8, ptr addrspace(3) [[TMP48]], align 2
; CHECK-NEXT:    br label %[[CONDFREE:.*]]
; CHECK:       [[CONDFREE]]:
; CHECK-NEXT:    call void @llvm.amdgcn.s.barrier()
; CHECK-NEXT:    br i1 [[XYZCOND]], label %[[FREE:.*]], label %[[END:.*]]
; CHECK:       [[FREE]]:
; CHECK-NEXT:    [[TMP106:%.*]] = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
; CHECK-NEXT:    [[TMP107:%.*]] = call ptr @llvm.returnaddress(i32 0)
; CHECK-NEXT:    [[TMP108:%.*]] = ptrtoint ptr [[TMP107]] to i64
; CHECK-NEXT:    [[TMP109:%.*]] = ptrtoint ptr addrspace(1) [[TMP106]] to i64
; CHECK-NEXT:    call void @__asan_free_impl(i64 [[TMP109]], i64 [[TMP108]])
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
WId:
  %0 = call i32 @llvm.amdgcn.workitem.id.x()
  %1 = call i32 @llvm.amdgcn.workitem.id.y()
  %2 = call i32 @llvm.amdgcn.workitem.id.z()
  %3 = or i32 %0, %1
  %4 = or i32 %3, %2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %Malloc, label %14

Malloc:
  %6 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 0), align 4
  %7 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 4, i32 2), align 4
  %8 = add i32 %6, %7
  %9 = zext i32 %8 to i64
  %10 = call ptr @llvm.returnaddress(i32 0)
  %11 = ptrtoint ptr %10 to i64
  %12 = call i64 @__asan_malloc_impl(i64 %9, i64 %11)
  %13 = inttoptr i64 %12 to ptr addrspace(1)
  store ptr addrspace(1) %13, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  br label %14

14:
  %xyzCond = phi i1 [ false, %WId ], [ true, %Malloc ]
  call void @llvm.amdgcn.s.barrier()
  %15 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 1, i32 0), align 4
  %16 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %15
  %17 = load i32, ptr addrspace(1) getelementptr inbounds (%llvm.amdgcn.sw.lds.k0.md.type, ptr addrspace(1) @llvm.amdgcn.sw.lds.k0.md, i32 0, i32 2, i32 0), align 4
  %18 = getelementptr inbounds i8, ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, i32 %17
  call void @use_variables()
  store i8 7, ptr addrspace(3) %16, align 1
  store i32 8, ptr addrspace(3) %18, align 2
  br label %CondFree

CondFree:
  call void @llvm.amdgcn.s.barrier()
  br i1 %xyzCond, label %Free, label %End

Free:
  %19 = load ptr addrspace(1), ptr addrspace(3) @llvm.amdgcn.sw.lds.k0, align 8
  %20 = call ptr @llvm.returnaddress(i32 0)
  %21 = ptrtoint ptr %20 to i64
  %22 = ptrtoint ptr addrspace(1) %19 to i64
  call void @__asan_free_impl(i64 %22, i64 %21)
  br label %End

End:
  ret void
}

declare i32 @llvm.amdgcn.workitem.id.x() #2
declare i32 @llvm.amdgcn.workitem.id.y() #2
declare i32 @llvm.amdgcn.workitem.id.z() #2
declare ptr @llvm.returnaddress(i32 immarg) #3
declare i64 @__asan_malloc_impl(i64, i64)
declare void @llvm.amdgcn.s.barrier() #4
declare void @__asan_free_impl(i64, i64)
declare i32 @llvm.amdgcn.lds.kernel.id() #2

attributes #0 = { sanitize_address }
attributes #1 = { sanitize_address "amdgpu-lds-size"="40" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent nocallback nofree nounwind willreturn }

!0 = !{i32 0, i32 1}
!1 = !{i32 0}
;.
; CHECK: attributes #[[ATTR0]] = { sanitize_address }
; CHECK: attributes #[[ATTR1]] = { sanitize_address "amdgpu-lds-size"="160" }
; CHECK: attributes #[[ATTR2:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; CHECK: attributes #[[ATTR3:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(none) }
; CHECK: attributes #[[ATTR4:[0-9]+]] = { convergent nocallback nofree nounwind willreturn }
; CHECK: attributes #[[ATTR5:[0-9]+]] = { convergent nocallback nofree nounwind willreturn memory(none) }
; CHECK: attributes #[[ATTR6:[0-9]+]] = { convergent nocallback nofree nounwind }
; CHECK: attributes #[[ATTR7:[0-9]+]] = { nounwind }
; CHECK: attributes #[[ATTR8]] = { nomerge }
;.
; CHECK: [[META0]] = !{i32 0, i32 1}
; CHECK: [[PROF1]] = !{!"branch_weights", i32 1, i32 1048575}
; CHECK: [[META2]] = !{i32 0}
;.
