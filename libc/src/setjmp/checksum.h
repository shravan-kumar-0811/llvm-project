//===-- Implementation header for jmpbuf checksum ---------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIBC_SRC_SETJMP_CHECKSUM_H
#define LLVM_LIBC_SRC_SETJMP_CHECKSUM_H

#include "src/__support/hash.h"
#include "src/__support/macros/attributes.h"
#include "src/__support/macros/config.h"
#include "src/setjmp/setjmp_impl.h"
#include "src/stdlib/abort.h"
#include "src/unistd/write.h"

namespace LIBC_NAMESPACE_DECL {

namespace jmpbuf {
using HashState = internal::HashState;
// Initial values generated by
// https://www.random.org/cgi-bin/randbyte?nbytes=48&format=h
// These values are only used for overlay targets.
LIBC_INLINE_VAR uint64_t register_mangle_cookie = 0xdf8a883867040cbc;
LIBC_INLINE_VAR uint64_t checksum_mangle_cookie = 0x9ed4fe406ebe9cf9;
LIBC_INLINE_VAR uint64_t randomness[4] = {
    0x83b9df7dddf5ab3d,
    0x06c931cca75e15c6,
    0x08280ec9e9a778bf,
    0x111f67f4aafc9276,
};

LIBC_INLINE int update_checksum(__jmp_buf *buf) {
  HashState state{
      randomness[0],
      randomness[1],
      randomness[2],
      randomness[3],
  };
  state.update(buf, offsetof(__jmp_buf, __chksum));
  buf->__chksum = state.finish() ^ checksum_mangle_cookie;
  return 0;
}

LIBC_INLINE void verify(const __jmp_buf *buf) {
  HashState state{
      randomness[0],
      randomness[1],
      randomness[2],
      randomness[3],
  };
  state.update(buf, offsetof(__jmp_buf, __chksum));
  auto chksum = state.finish() ^ checksum_mangle_cookie;
  if (chksum != buf->__chksum) {
    constexpr char MSG[] = "jump buffer corrupted\n";
    LIBC_NAMESPACE::write(2, MSG, sizeof(MSG) - 1);
    LIBC_NAMESPACE::abort();
  }
}

} // namespace jmpbuf

} // namespace LIBC_NAMESPACE_DECL

#endif // LLVM_LIBC_SRC_SETJMP_CHECKSUM_H
